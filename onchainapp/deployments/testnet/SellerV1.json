{
  "address": "0xfFF63Bc9aa8343e10870f871f7BE2Fd8a4D844e9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IFactory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_uSDT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyerContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roleManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "InvalidItemId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "InvalidStageSelector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OrderResolved",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "QuantityShouldBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "UnsupportedCategory",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "priceLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "description",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "location",
                  "type": "bytes"
                },
                {
                  "components": [
                    {
                      "internalType": "uint24",
                      "name": "quantity",
                      "type": "uint24"
                    },
                    {
                      "internalType": "uint32",
                      "name": "date",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "offerPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "commitment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "customer",
                      "type": "address"
                    },
                    {
                      "internalType": "enum IFactory.Stage",
                      "name": "stage",
                      "type": "uint8"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bytes",
                          "name": "destination",
                          "type": "bytes"
                        },
                        {
                          "internalType": "bytes",
                          "name": "contacts",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct IFactory.Info",
                      "name": "info",
                      "type": "tuple"
                    },
                    {
                      "internalType": "address",
                      "name": "firstSigner",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct IFactory.Order[]",
                  "name": "orders",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IFactory.ItemInfo",
              "name": "info",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IFactory.Category",
                  "name": "category",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "uri",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IFactory.ItemMetadata",
              "name": "meta",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct IFactory.Item",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "ItemAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "stageSelector",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "acceptOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyerContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPriceLimit",
          "type": "uint256"
        }
      ],
      "name": "editPriceLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "newQuantity",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "editQuantity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterfaceId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quantity",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "categorySelector",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "priceLimit",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "imageUrI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "name": "listItem",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "removeItem",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "setRoleManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uSDT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb334e25a9d40656758eb9b20537996d1ebd55e49f1745365fde939dd71d50bb0",
  "receipt": {
    "to": null,
    "from": "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "contractAddress": "0xfFF63Bc9aa8343e10870f871f7BE2Fd8a4D844e9",
    "transactionIndex": 16,
    "gasUsed": "1885520",
    "logsBloom": "0x
    "blockHash": "0x61e2373a88000fd3cf2a4cf525f89ca19fa1f51d13975b5cb1b7a89b9c5a301d",
    "transactionHash": "0xb334e25a9d40656758eb9b20537996d1ebd55e49f1745365fde939dd71d50bb0",
    "logs": [],
    "blockNumber": 16446128,
    "cumulativeGasUsed": "6059676",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1a375D2aEF1370B306B4aCc9d930e3C2defaBF9c",
    "0xb28721f7b977D64F9401161EA91bC25D59F25308",
    "0x99C62eF80CA0ECc942994d407ecA89dDE3625F7d",
    "0xe09e23F8a8032BB39326098802c970f9b48D726C"
  ],
  "numDeployments": 1,
  "solcInputHash": "ac0fce825edebd2a7665c7bbef4eae80",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_uSDT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyerContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roleManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InvalidItemId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"InvalidStageSelector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderResolved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"QuantityShouldBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"UnsupportedCategory\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"description\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"quantity\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"date\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"internalType\":\"enum IFactory.Stage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"destination\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"contacts\",\"type\":\"bytes\"}],\"internalType\":\"struct IFactory.Info\",\"name\":\"info\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"firstSigner\",\"type\":\"address\"}],\"internalType\":\"struct IFactory.Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IFactory.ItemInfo\",\"name\":\"info\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IFactory.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"uri\",\"type\":\"bytes\"}],\"internalType\":\"struct IFactory.ItemMetadata\",\"name\":\"meta\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct IFactory.Item\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"ItemAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stageSelector\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"acceptOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPriceLimit\",\"type\":\"uint256\"}],\"name\":\"editPriceLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"newQuantity\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"editQuantity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterfaceId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quantity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"categorySelector\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"priceLimit\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageUrI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"name\":\"listItem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"removeItem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setRoleManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uSDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOrder(uint8,uint256,uint256)\":{\"details\":\"Move order to the next stage. Example: A seller can accept or reject order but cannot cancel order i.e stage must not equal index 3.  Only the buyer can cancel.\",\"params\":{\"itemId\":\": Item id/index/position.\",\"orderId\":\": Order id/index/position.\",\"stageSelector\":\": Stage selector should be in number since enums are index-based.\"}},\"editPriceLimit(uint256,uint256)\":{\"details\":\"Edits price of an item.\",\"params\":{\"itemId\":\": Item index.\",\"newPriceLimit\":\": Latest price.\"}},\"editQuantity(uint24,uint256)\":{\"params\":{\"itemId\":\": Item index.\",\"newQuantity\":\": New Quantity\"}},\"listItem(uint8,uint8,uint256,string,string,string)\":{\"details\":\"Add new Item to storeFront.\",\"params\":{\"categorySelector\":\": Main category of item.\",\"description\":\": Item description.\",\"imageUrI\":\": Image urI i.e IPFS link to uploaded images.\",\"location\":\": Seller's location/address.\",\"priceLimit\":\": Price per unit of item.\",\"quantity\":\": Quantity of item seller has to sell.\"}},\"pause()\":{\"details\":\"Triggers stopped state. Requirements: Only owner role can call. - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeItem(uint256)\":{\"details\":\"Removes item from storefront.\",\"params\":{\"itemId\":\": Item id\"}},\"setRoleManager(address)\":{\"params\":{\"newManager\":\": New manager address\"}},\"unpause()\":{\"details\":\"Returns to normal state. Requirements: - Only owner role can call. - The contract must be paused.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"editQuantity(uint24,uint256)\":{\"notice\":\"Edit item quantity\"},\"setRoleManager(address)\":{\"notice\":\"Set RoleManager\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementations/SellerV1.sol\":\"SellerV1\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nlibrary Lib {\\r\\n    function isZeroAddress(address target) internal pure returns(bool _isZero) {\\r\\n        _isZero = target == address(0);\\r\\n    }\\r\\n\\r\\n    function notEqualInAddress(address a, address b, string memory errorMessage) internal pure {\\r\\n        require( a != b, errorMessage);\\r\\n    }\\r\\n\\r\\n    function equalInAddress(address a, address b, string memory errorMessage)internal pure {\\r\\n        require( a == b, errorMessage);\\r\\n    }\\r\\n\\r\\n    function assertEqual(uint a, uint b, string memory errorMessage) internal pure {\\r\\n        require( a == b, errorMessage);\\r\\n    }\\r\\n\\r\\n    function assertGThan(uint a, uint b, string memory errorMessage) internal pure {\\r\\n        require( a > b, errorMessage);\\r\\n    }\\r\\n\\r\\n    function assertLThan(uint a, uint b, string memory errorMessage) internal pure {\\r\\n        require( a < b, errorMessage);\\r\\n    }\\r\\n\\r\\n    function assertGThanOrEqual(uint a, uint b, string memory errorMessage) internal pure {\\r\\n        require( a >= b, errorMessage);\\r\\n    }\\r\\n\\r\\n    function toBytes(string memory str) internal pure returns(bytes memory) {\\r\\n        return abi.encode(str);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Percentage base\\r\\n     */\\r\\n    function _getBase() internal pure returns(uint16 base) {\\r\\n        base = 10000;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Computes platform fee.\\r\\n        @param makerRate : The amount of fee (in %) charged by the platform\\r\\n            Note : Raw rate must multiply by 100 to get the expected value i.e\\r\\n            if maker rate is 0.1%, it should be parsed as 0.1 * 100 = 10.\\r\\n            See `_getPercentage()`.\\r\\n        @param amount should be in decimals.\\r\\n    */\\r\\n    function computeFee(\\r\\n        uint amount, \\r\\n        uint16 makerRate\\r\\n    ) \\r\\n        internal \\r\\n        pure \\r\\n        returns (uint mFee) \\r\\n    {\\r\\n        mFee = _getPercentage(amount, makerRate);\\r\\n    }\\r\\n\\r\\n    /**     @dev Calculation of percentage.\\r\\n        *   This is how we calculate percentage to arrive at expected value with \\r\\n        *   good precision.\\r\\n        *   We chose a base value (numerator as 10000) repesenting a 100% of input value. This means if Alice wish to set \\r\\n        *   her interest rate to 0.05%, she only need to multiply it by 100 i.e 0.05 * 100 = 5. Her input will be 5. \\r\\n        *   Since Solidity do not accept decimals as input, in our context, the minimum value to parse is '0' indicating \\r\\n        *   zero interest rate. If the platform wish to set interest at least, the minimum value will be 1 reprensenting 0.01%.\\r\\n        *   The minimum interest rate to set is 0.01% if interest must be set at least.\\r\\n        *   @notice To reiterate, raw interest must be multiplied by 100 before giving as input. \\r\\n        *   @param principal : The principal value on which the interest is based. Value should be in decimals.\\r\\n        *   @param interest : Interest rate. \\r\\n        *   \\r\\n        *   Rules\\r\\n        *   -----\\r\\n        *   - Principal cannot be less than base.\\r\\n        *   - Interest cannot be greater than (2 ^ 16) - 1\\r\\n    */\\r\\n    function _getPercentage(\\r\\n        uint principal, \\r\\n        uint16 interest\\r\\n    )\\r\\n        internal \\r\\n        pure \\r\\n        returns (uint _return) \\r\\n    {\\r\\n        uint16 base = _getBase(); \\r\\n        if(interest == 0 || principal == 0) return 0;\\r\\n        assertLThan(interest, type(uint16).max, \\\"Interest overflow\\\");\\r\\n        assertGThan(principal, base, \\\"Principal should be greater than 10000\\\");\\r\\n        unchecked {\\r\\n            _return = (principal * interest) / base;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x401e116d26d725613a77b8c6bcf47ff115b3000b4294d0e554183559caabbee8\",\"license\":\"MIT\"},\"contracts/abstracts/OnlyRoleStatus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { MsgSender, RoleBased } from \\\"../implementations/RoleBased.sol\\\";\\r\\nimport { IRoleBased } from \\\"../interfaces/IRoleBased.sol\\\";\\r\\n\\r\\nabstract contract OnlyRoleStatus is MsgSender {\\r\\n    address public roleManager;\\r\\n\\r\\n    constructor(address _roleManager)\\r\\n    {\\r\\n        _setRoleManager(_roleManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Caller must have owner role before execeution can proceed.\\r\\n     * The 'errorMessage' argument can be used to return error specific to \\r\\n     * a context e.g function call. \\r\\n     * @param errorMessage : Custom error message\\r\\n     */\\r\\n    modifier onlyRoleStatus(string memory errorMessage) {\\r\\n        address mgr = roleManager;\\r\\n        require(mgr != address(0), \\\"OnlyRoleStatus: Manager not set\\\");\\r\\n        require(IRoleBased(mgr).hasRole(_msgSender()), errorMessage);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _setRoleManager(\\r\\n        address newManager\\r\\n    )\\r\\n        private\\r\\n    {\\r\\n        roleManager = newManager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set RoleManager\\r\\n     * @param newManager : New manager address\\r\\n     */\\r\\n    function setRoleManager(\\r\\n        address newManager\\r\\n    )\\r\\n        public\\r\\n        onlyRoleStatus(\\\"OnlyRoleStatus: Not permitted\\\")\\r\\n        returns(bool)\\r\\n    {\\r\\n        _setRoleManager(newManager);\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x13a383e94cace80b9a412c6c76225579a10c0e0b0fd8377c0fd07b6fe7da4df8\",\"license\":\"MIT\"},\"contracts/abstracts/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { OnlyRoleStatus } from \\\"./OnlyRoleStatus.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n * \\r\\n * We use part of the Openzeppelin Pausable contract to supplement our strategy.\\r\\n * Thanks to the OZ team.\\r\\n */\\r\\nabstract contract Pausable is OnlyRoleStatus {\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev The operation failed because the contract is paused.\\r\\n     */\\r\\n    error EnforcedPause();\\r\\n\\r\\n    /**\\r\\n     * @dev The operation failed because the contract is not paused.\\r\\n     */\\r\\n    error ExpectedPause();\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor(\\r\\n        address _roleManager\\r\\n    ) OnlyRoleStatus(_roleManager) {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        _requireNotPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        _requirePaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is paused.\\r\\n     */\\r\\n    function _requireNotPaused() internal view {\\r\\n        if (paused()) {\\r\\n            revert EnforcedPause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is not paused.\\r\\n     */\\r\\n    function _requirePaused() internal view virtual {\\r\\n        if (!paused()) {\\r\\n            revert ExpectedPause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * Only owner role can call.\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function pause() \\r\\n        public \\r\\n        onlyRoleStatus(\\\"Pausable: OnlyRoleStatus can pause\\\") \\r\\n        whenNotPaused \\r\\n    {\\r\\n        _paused = true; \\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Only owner role can call.\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function unpause() \\r\\n        public \\r\\n        onlyRoleStatus(\\\"Pausable: OnlyRoleStatus can unpause\\\") \\r\\n        whenPaused \\r\\n    {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb80f9e63b4f88eeca077b1cb89749cfb45084d1f3f122ac330e393d504068f39\",\"license\":\"MIT\"},\"contracts/implementations/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { IFactory } from \\\"../interfaces/IFactory.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { Lib } from \\\"../Lib.sol\\\";\\r\\nimport { Pausable } from \\\"../abstracts/Pausable.sol\\\";\\r\\n\\r\\nabstract contract Common is Pausable {\\r\\n    using Lib for *;\\r\\n\\r\\n    // Errors\\r\\n    error UnsupportedCategory(uint8);\\r\\n    error InvalidItemId(uint);\\r\\n\\r\\n    IFactory immutable factory;\\r\\n    IERC20 public uSDT;\\r\\n\\r\\n    /**\\r\\n     * @notice In order to use 'categorySelector' with the enum Category, we must\\r\\n     * ensure 'categorySelector' is not out of bound since enums are index based\\r\\n     * just like an array. \\r\\n     * @param categorySelector : Category selector \\r\\n     */\\r\\n    modifier validateCategoryId(uint8 categorySelector) {\\r\\n        if(categorySelector >= 10) revert UnsupportedCategory(categorySelector);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function : Validate store Id\\r\\n     * @param itemId : Item id\\r\\n     * @param orderId : Order id\\r\\n     * @param includeOrderId : Boolean flag to validate order id or not.\\r\\n    */\\r\\n    modifier validateIds(\\r\\n        uint itemId, \\r\\n        uint orderId, \\r\\n        bool includeOrderId\\r\\n    ) \\r\\n    {\\r\\n        if(itemId >= _wrappedFactory().getStoreSize()) revert InvalidItemId(itemId);\\r\\n        if(includeOrderId) {\\r\\n            orderId.assertLThan(_wrappedFactory().getItem(itemId).info.orders.length, \\\"Invalid orderId\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        IFactory _factory,\\r\\n        IERC20 _uSDT, \\r\\n        address _roleManager\\r\\n    ) \\r\\n        Pausable(_roleManager)\\r\\n    {\\r\\n        address(_factory).notEqualInAddress(address(0), \\\"_factory is undefined\\\");\\r\\n        factory = _factory;\\r\\n        uSDT = _uSDT;\\r\\n    }\\r\\n\\r\\n    function _wrappedFactory() internal view returns(IFactory iFactory) {\\r\\n        iFactory = IFactory(factory);\\r\\n    } \\r\\n\\r\\n    function approve(address to, uint amt) internal {\\r\\n        IERC20(uSDT).approve(to, amt);\\r\\n    } \\r\\n\\r\\n    /**\\r\\n     * @dev Transfer fee to fee receiver\\r\\n     * @param amount : Amount to send.\\r\\n     * @param feeReceiver : Recipient.\\r\\n     */\\r\\n    function _transferFee(uint amount, address feeReceiver) internal {\\r\\n        IERC20(uSDT).transfer(feeReceiver, amount);\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x92d9b08e1731ffffbfedb0549c5a5d3685e043fec360c1e065a4c9f747c889a3\",\"license\":\"MIT\"},\"contracts/implementations/RoleBased.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { IRoleBased } from \\\"../interfaces/IRoleBased.sol\\\";\\r\\n/**\\r\\n * @title MsgSender \\r\\n * @author (Bobeu)\\r\\n * @notice Non-deployable contract simply returning the calling account.\\r\\n */\\r\\nabstract contract MsgSender {\\r\\n    function _msgSender() internal view returns(address sender) {\\r\\n        sender = msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title RoleBased \\r\\n * @author (Bobeu)\\r\\n * @notice Standalone contract for managing roleship in kimiko protocol.\\r\\n */\\r\\ncontract RoleBased is IRoleBased, MsgSender{\\r\\n    /**\\r\\n     * @notice Number of roles.\\r\\n     */\\r\\n    uint public rolesCount;\\r\\n\\r\\n    /**\\r\\n     * @notice Addresses with roleship permission.\\r\\n     */\\r\\n    \\r\\n    mapping (address => bool) private _isRoleBased;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of rolesCount to addresses.\\r\\n     * A valid id will return a mapped role.\\r\\n     */\\r\\n    mapping (uint => address) public roles;\\r\\n\\r\\n    /**\\r\\n     * @dev Only role is allowed.\\r\\n     */\\r\\n    modifier onlyRoleStatus {\\r\\n        require(_isRoleBased[_msgSender()], \\\"Oop! Caller is not recognized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _setRole(_msgSender(), true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns role variable.\\r\\n     */\\r\\n    function _getRole(uint roleId) \\r\\n        internal \\r\\n        view \\r\\n        returns(address _role) \\r\\n    {\\r\\n        _role = roles[roleId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add or remove target address as role.\\r\\n     * @param target: Target address.\\r\\n     * @notice 'target' parameter must not be empty.\\r\\n     */\\r\\n    function _setRole(\\r\\n        address target,\\r\\n        bool add\\r\\n    ) \\r\\n        private \\r\\n    {\\r\\n        require(target != address(0), \\\"Simplifi RoleBased: 'target' parameter is empty\\\");\\r\\n        add? (_isRoleBased[target] = true, rolesCount ++) : (_isRoleBased[target] = false, rolesCount --);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new role address\\r\\n     * @param newRoles: New roles\\r\\n     * @notice Only address with role permission can add another role.\\r\\n     */\\r\\n    function setPermission(\\r\\n        address[] memory newRoles\\r\\n    ) \\r\\n        external\\r\\n        onlyRoleStatus\\r\\n        returns(bool) \\r\\n    {\\r\\n        bool rt = true;\\r\\n        for(uint r = 0; r < newRoles.length; r++) {\\r\\n            _setRole(newRoles[r], rt);\\r\\n        }\\r\\n        return rt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an address as role.\\r\\n     * @param target: Target address\\r\\n     * @notice Only address with role permission can remove another role.\\r\\n     */\\r\\n    function removeRole(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        onlyRoleStatus\\r\\n        returns(bool) \\r\\n    {\\r\\n        _setRole(target, false);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev An role can renounce their roleship. This however will not leave the\\r\\n     * contract empty without an role. There must be at least one role left.\\r\\n     * @notice Only address with role permission can renounce roleship.\\r\\n     */\\r\\n    function renounceRole() \\r\\n        external\\r\\n        onlyRoleStatus\\r\\n        returns(bool) \\r\\n    {\\r\\n        require(rolesCount > 1, \\\"At least 2 roles is required for one to leave\\\"); \\r\\n        _setRole(_msgSender(), false);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns role variable.\\r\\n     * Can be called externally by contracts.\\r\\n     * @param roleId : Owner Id. \\r\\n     */\\r\\n    function getRole(\\r\\n        uint roleId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address) \\r\\n    {\\r\\n        return _getRole(roleId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if target is an role.\\r\\n     * @param target : Target address.\\r\\n     */\\r\\n    function hasRole(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool) \\r\\n    {\\r\\n        return _isRoleBased[target];\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4b454fef8fd2ede49a613a476ff57d704bffef8a2480c28c499e6aaaae11a314\",\"license\":\"MIT\"},\"contracts/implementations/SellerV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { IFactory } from \\\"../interfaces/IFactory.sol\\\";\\r\\nimport { IBuyer } from \\\"../interfaces/IBuyer.sol\\\";\\r\\nimport { Lib } from \\\"../Lib.sol\\\";\\r\\nimport { Common } from \\\"./Common.sol\\\";\\r\\nimport { ISeller } from \\\"../interfaces/ISeller.sol\\\";\\r\\n\\r\\ncontract SellerV1 is ISeller, Common {\\r\\n    using Lib for *;\\r\\n\\r\\n    error InvalidStageSelector(uint8);\\r\\n    error OrderResolved();\\r\\n    error QuantityShouldBeGreaterThanZero(uint);\\r\\n\\r\\n    event ItemAdded(IFactory.Item);\\r\\n\\r\\n    address public buyerContract;\\r\\n\\r\\n    /**\\r\\n     * @notice Contract identifier\\r\\n     * We use it to identify which contract is calling in the factory contract.\\r\\n     */\\r\\n    bytes32 immutable interfaceId;\\r\\n\\r\\n    /**@dev Only Store owner function\\r\\n     * @param itemId : item identifier or position in storage \\r\\n     */\\r\\n    modifier isStoreOwner(uint itemId) {\\r\\n        _wrappedFactory().getItem(itemId).seller.equalInAddress(_msgSender(), \\\"OnlySeller is allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        IFactory _factory, \\r\\n        IERC20 _uSDT, \\r\\n        address _buyerContract,\\r\\n        address _roleManager\\r\\n    ) \\r\\n        Common(_factory, _uSDT, _roleManager) \\r\\n    {\\r\\n        buyerContract = _buyerContract;\\r\\n        interfaceId = keccak256(abi.encodePacked(\\\"SELLER\\\"));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add new Item to storeFront.\\r\\n     * @param quantity : Quantity of item seller has to sell.\\r\\n     * @param categorySelector : Main category of item.\\r\\n     * @param priceLimit : Price per unit of item.\\r\\n     * @param imageUrI : Image urI i.e IPFS link to uploaded images.\\r\\n     * @param description : Item description.\\r\\n     * @param location : Seller's location/address.\\r\\n     */\\r\\n    function listItem(\\r\\n        uint8 quantity,\\r\\n        uint8 categorySelector,\\r\\n        uint priceLimit,\\r\\n        string memory imageUrI,\\r\\n        string memory description,\\r\\n        string memory location\\r\\n    ) \\r\\n        public \\r\\n        validateCategoryId(categorySelector) \\r\\n        returns(bool) \\r\\n    {\\r\\n        if(quantity == 0) revert QuantityShouldBeGreaterThanZero(quantity);\\r\\n        emit ItemAdded(\\r\\n            _wrappedFactory().listNewItem(\\r\\n                IFactory.AddItemParam(\\r\\n                    quantity,\\r\\n                    categorySelector,\\r\\n                    priceLimit,\\r\\n                    imageUrI,\\r\\n                    description,\\r\\n                    location,\\r\\n                    _msgSender()\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes item from storefront.\\r\\n     * @param itemId : Item id\\r\\n     */\\r\\n    function removeItem(uint itemId) \\r\\n        public \\r\\n        validateIds(itemId, 0, false)\\r\\n        isStoreOwner(itemId)\\r\\n        returns(bool) \\r\\n    {\\r\\n        IFactory iFact = _wrappedFactory();\\r\\n        IFactory.Item memory item = iFact.getItem(itemId);\\r\\n        if(item.info.orders.length > 0) {\\r\\n            IBuyer(buyerContract).refund(item.info.orders);\\r\\n        }\\r\\n        iFact.removeItem(itemId);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move order to the next stage. Example: A seller can accept or\\r\\n     * reject order but cannot cancel order i.e stage must not equal index 3. \\r\\n     * Only the buyer can cancel.\\r\\n     * @param stageSelector : Stage selector should be in number since enums are index-based.\\r\\n     * @param itemId : Item id/index/position.\\r\\n     * @param orderId : Order id/index/position.\\r\\n     */\\r\\n    function acceptOrder(\\r\\n        uint8 stageSelector,\\r\\n        uint itemId, \\r\\n        uint orderId\\r\\n    ) \\r\\n        public \\r\\n        validateIds(itemId, orderId, true)\\r\\n        isStoreOwner(itemId)\\r\\n        returns(bool) \\r\\n    {\\r\\n        if(stageSelector >= 6 || stageSelector == 3) revert InvalidStageSelector(stageSelector);\\r\\n        IFactory iFact = _wrappedFactory();\\r\\n        IFactory.Item memory item = iFact.getItem(itemId);\\r\\n        require(orderId < item.info.orders.length, \\\"Invalid orderId\\\");\\r\\n        IFactory.Stage stage = item.info.orders[orderId].stage;\\r\\n        if(stage == IFactory.Stage.CANCELLED || stage == IFactory.Stage.DELIVERED) revert OrderResolved();\\r\\n        require(iFact.moveOrder(itemId, orderId, IFactory.Stage(stageSelector)), \\\"Seller: Operation failed\\\");\\r\\n        if(IFactory.Stage(stageSelector) == IFactory.Stage.DELIVERED) {\\r\\n            iFact.signConfirmation(itemId, orderId, _msgSender());\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Edits price of an item.\\r\\n     * @param itemId : Item index.\\r\\n     * @param newPriceLimit : Latest price.\\r\\n     */\\r\\n    function editPriceLimit(\\r\\n        uint itemId,\\r\\n        uint newPriceLimit\\r\\n    ) \\r\\n        external \\r\\n        validateIds(itemId, 0, false) \\r\\n        isStoreOwner(itemId) \\r\\n        returns (bool) \\r\\n    {\\r\\n        _wrappedFactory().editPriceLimit(itemId, newPriceLimit);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Edit item quantity\\r\\n     * @param itemId : Item index.\\r\\n     * @param newQuantity : New Quantity\\r\\n     */\\r\\n    function editQuantity(\\r\\n        uint24 newQuantity,\\r\\n        uint itemId\\r\\n    ) \\r\\n        public\\r\\n        validateIds(itemId, 0, false) \\r\\n        isStoreOwner(itemId) \\r\\n        returns (bool) \\r\\n    {\\r\\n        _wrappedFactory().editQuantity(newQuantity, itemId);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getInterfaceId() external view returns(bytes32) {\\r\\n        return interfaceId;\\r\\n    }\\r\\n    \\r\\n}\\r\\n\",\"keccak256\":\"0x9bb095713d573abef465d606662ac0e27d9794083134357a3933f705607dadaa\",\"license\":\"MIT\"},\"contracts/interfaces/IBuyer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { IFactory } from \\\"./IFactory.sol\\\";\\r\\nimport { ICommon } from \\\"./ICommon.sol\\\";\\r\\n\\r\\ninterface IBuyer is ICommon {\\r\\n    function refund(IFactory.Order[] memory) external returns(bool);\\r\\n    function paySeller(uint amount, address seller, address feeReceiver) external returns(bool);\\r\\n}\",\"keccak256\":\"0xeb3f2c06e53b6e4d7f394c4faf4feed0ee8cfa7728ceb464505a4ae4d9c83344\",\"license\":\"MIT\"},\"contracts/interfaces/ICommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface ICommon {\\r\\n    function getInterfaceId() external view returns(bytes32);\\r\\n}\",\"keccak256\":\"0x78a28ea0a82ca26fa65bd009a6aa1cc71bc6ba507d63b149fe51b536e4998f1f\",\"license\":\"MIT\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IFactory {\\r\\n    enum Category { FASHION, ELECTRONICS, PHONESNTABLETS, FURNITURES, VEHICLES, ANIMALSNPETS, EQUIPMENTSNTOOLS, REPAIRNCONSTRUCTION, SOFTWARES, BABIESNKIDS }\\r\\n    enum Stage { COMMIT, ACCEPTED, REJECTED, CANCELLED, INTRANSIT, DELIVERED }\\r\\n\\r\\n    error UnsupportedCategory(uint8);\\r\\n    error InvalidItemId();\\r\\n    error InvalidOrderId(uint negoId);\\r\\n    error OnlyBuyerCanConfirmDelivery();\\r\\n    error NotTheRealNegotiator(address);\\r\\n    error RequestedQuantityExceedAvailableQuantity(uint requested, uint expected);\\r\\n\\r\\n    struct Item {\\r\\n        address seller;\\r\\n        ItemInfo info;\\r\\n        ItemMetadata meta;\\r\\n    }\\r\\n\\r\\n    struct ItemInfo {\\r\\n        uint quantity;\\r\\n        uint id;\\r\\n        uint priceLimit;\\r\\n        bytes description;\\r\\n        bytes location;\\r\\n        Order[] orders;\\r\\n    }\\r\\n\\r\\n    struct ItemMetadata {\\r\\n        Category category;\\r\\n        bytes uri;\\r\\n    }\\r\\n\\r\\n    struct Order {\\r\\n        uint24 quantity;\\r\\n        uint32 date;\\r\\n        uint offerPrice;\\r\\n        uint commitment;\\r\\n        address customer;\\r\\n        Stage stage;\\r\\n        Info info;\\r\\n        address firstSigner;\\r\\n    }\\r\\n\\r\\n    struct Info {\\r\\n        bytes destination;\\r\\n        bytes contacts;\\r\\n    }\\r\\n\\r\\n    // -------> PARAMS <-------\\r\\n\\r\\n    struct AddItemParam {\\r\\n        uint8 quantity;\\r\\n        uint8 categorySelector;\\r\\n        uint priceLimit;\\r\\n        string imageUrI;\\r\\n        string description;\\r\\n        string location;\\r\\n        address seller;\\r\\n    }\\r\\n\\r\\n    function listNewItem(AddItemParam memory) external returns(Item memory) ;\\r\\n    function placeOrder(Order memory order, uint itemId, uint24 newQuantity) external returns(bool);\\r\\n    function getItem(uint itemId) external view returns(Item memory);\\r\\n    function editPriceLimit(uint itemId, uint newPriceLimit) external returns (bool);\\r\\n    function editOrder(\\r\\n        uint24 newQuantity,\\r\\n        uint itemId,\\r\\n        uint orderId,\\r\\n        uint newOfferPrice,\\r\\n        uint newCommitment\\r\\n    )\\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function editQuantity(uint24 newQuantity, uint itemId) external returns (bool);\\r\\n    function getStoreSize() external view returns(uint);\\r\\n    function removeItem(uint itemId) external returns(bool);\\r\\n    function cancelOrder(uint itemId, uint orderId) external returns(bool);\\r\\n    function signConfirmation(uint itemId, uint orderId, address party) external returns(bool);\\r\\n    function moveOrder(\\r\\n        uint itemId,\\r\\n        uint orderId,\\r\\n        Stage stage\\r\\n    ) external returns(bool);\\r\\n\\r\\n    event ItemRemoved(uint itemId, IERC20 asset);\\r\\n}\",\"keccak256\":\"0x2c7b1ca26386105e61ab27826250670189676f707f4b761bf5e4249b97f35418\",\"license\":\"MIT\"},\"contracts/interfaces/IRoleBased.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/**\\r\\n * @title IRoleBased \\r\\n * Interface of the RoleBased contract\\r\\n * @author Bobeu\\r\\n */\\r\\ninterface IRoleBased {\\r\\n    function setPermission(\\r\\n        address[] memory newRoles\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function removeRole(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function renounceRole() \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function getRole(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address);\\r\\n\\r\\n    function hasRole(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool);\\r\\n}\",\"keccak256\":\"0x62204a90dd90e628250e4e220931adac9bba8dbc1b188daa9271f02c55d1a970\",\"license\":\"MIT\"},\"contracts/interfaces/ISeller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { ICommon } from \\\"./ICommon.sol\\\";\\r\\n\\r\\ninterface ISeller is ICommon {}\",\"keccak256\":\"0x90540e27827ac38f73d291685ec5bf0f934b0ee604c7f47035d9489b8037bc92\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620022ff380380620022ff8339810160408190526200003491620001de565b83838280806200004d8164010000000062000142810204565b50506000805460a060020a60ff021916815560408051808201909152601581527f5f666163746f727920697320756e646566696e656400000000000000000000006020820152620000b291600160a060020a0386169164010000000062000164810204565b50600160a060020a0391821660805260018054918316600160a060020a031992831617905560028054928516929091169190911790556040516200011c906020017f53454c4c45520000000000000000000000000000000000000000000000000000815260060190565b60408051601f19818403018152919052805160209091012060a052506200029692505050565b60008054600160a060020a031916600160a060020a0392909216919091179055565b81600160a060020a031683600160a060020a031614158190620001bf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001b6919062000246565b60405180910390fd5b50505050565b600160a060020a0381168114620001db57600080fd5b50565b60008060008060808587031215620001f557600080fd5b84516200020281620001c5565b60208601519094506200021581620001c5565b60408601519093506200022881620001c5565b60608601519092506200023b81620001c5565b939692955090935050565b600060208083528351808285015260005b81811015620002755785810183015185820160400152820162000257565b506000604082860101526040601f19601f8301168501019250505092915050565b60805160a051611fe862000317600039600061016f015260008181610219015281816102d101528181610424015281816104e20152818161060801528181610852015281816109050152818161093701528181610c6601528181610d1901528181610d8901528181610dc001528181610e730152610ef70152611fe86000f3fe608060405234801561001057600080fd5b50600436106100d25760003560e060020a900480637132917111610090578063b33347f91161006a578063b33347f9146101c6578063c376c8ed146101d9578063dedfb104146101ec578063f1d588c5146101ff57600080fd5b806371329171146101985780638456cb59146101ab57806394d71bc4146101b357600080fd5b8062435da5146100d75780632a5f6de8146101075780633c6e0f371461012a5780633f4ba83a1461013d5780635c975abb146101475780636b9241fc1461016a575b600080fd5b6000546100ea90600160a060020a031681565b604051600160a060020a0390911681526020015b60405180910390f35b61011a61011536600461147e565b610212565b60405190151581526020016100fe565b61011a610138366004611627565b61055e565b610145610705565b005b60005474010000000000000000000000000000000000000000900460ff1661011a565b6040517f000000000000000000000000000000000000000000000000000000000000000081526020016100fe565b61011a6101a63660046116d9565b61084b565b610145610b1c565b61011a6101c1366004611706565b610c5f565b61011a6101d4366004611732565b610db8565b6001546100ea90600160a060020a031681565b6002546100ea90600160a060020a031681565b61011a61020d36600461177a565b611243565b60008281807f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029c919061179e565b83106102c65760405160e260020a6309afba81028152600481018490526024015b60405180910390fd5b80156103b5576103b57f00000000000000000000000000000000000000000000000000000000000000005b600160a060020a0316633129e773856040518263ffffffff1660e060020a02815260040161032191815260200190565b600060405180830381865afa15801561033e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103669190810190611a65565b6020015160a00151516040518060400160405280600f81526020017f496e76616c6964206f7264657249640000000000000000000000000000000000815250846113729092919063ffffffff16565b856104a4335b604080518082018252601581527f4f6e6c7953656c6c657220697320616c6c6f7765640000000000000000000000602082015290517f3129e77300000000000000000000000000000000000000000000000000000000815260048101859052600160a060020a037f00000000000000000000000000000000000000000000000000000000000000001690633129e77390602401600060405180830381865afa15801561046b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104939190810190611a65565b51600160a060020a0316919061139c565b6040517f2a5f6de80000000000000000000000000000000000000000000000000000000081526004810188905260248101879052600160a060020a037f00000000000000000000000000000000000000000000000000000000000000001690632a5f6de8906044015b6020604051808303816000875af115801561052c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105509190611b9b565b506001979650505050505050565b600085600a8160ff16106105a3576040517fb251f34600000000000000000000000000000000000000000000000000000000815260ff821660048201526024016102bd565b8760ff166000036105e5576040517f826aa25900000000000000000000000000000000000000000000000000000000815260ff891660048201526024016102bd565b7f76d4238e656870cfd07edd53351003d94e9c38a8ba032fa1c1014f7eef7f85167f0000000000000000000000000000000000000000000000000000000000000000600160a060020a031663f443914e6040518060e001604052808c60ff1681526020018b60ff1681526020018a81526020018981526020018881526020018781526020016106713390565b600160a060020a0316905260405160e060020a63ffffffff841602815261069b9190600401611be9565b6000604051808303816000875af11580156106ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106e29190810190611a65565b6040516106ef9190611e11565b60405180910390a1506001979650505050505050565b604051806060016040528060248152602001611f8f60249139600054600160a060020a03168061074a5760405160e560020a62461bcd0281526004016102bd90611ec5565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa15801561079c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c09190611b9b565b82906107e25760405160e560020a62461bcd0281526004016102bd9190611efc565b506107eb6113d3565b6000805474ff0000000000000000000000000000000000000000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a15050565b60008181807f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d5919061179e565b83106108fa5760405160e260020a6309afba81028152600481018490526024016102bd565b8015610929576109297f00000000000000000000000000000000000000000000000000000000000000006102f1565b84610933336103bb565b60007f00000000000000000000000000000000000000000000000000000000000000006040517f3129e77300000000000000000000000000000000000000000000000000000000815260048101899052909150600090600160a060020a03831690633129e77390602401600060405180830381865afa1580156109ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e29190810190611a65565b602081015160a001515190915015610a8957600254602082015160a001516040517f82a736f3000000000000000000000000000000000000000000000000000000008152600160a060020a03909216916382a736f391610a4491600401611f0f565b6020604051808303816000875af1158015610a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a879190611b9b565b505b6040517f7132917100000000000000000000000000000000000000000000000000000000815260048101899052600160a060020a038316906371329171906024016020604051808303816000875af1158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d9190611b9b565b50600198975050505050505050565b604051806060016040528060228152602001611f6d60229139600054600160a060020a031680610b615760405160e560020a62461bcd0281526004016102bd90611ec5565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa158015610bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd79190611b9b565b8290610bf95760405160e560020a62461bcd0281526004016102bd9190611efc565b50610c02611429565b6000805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861082c3390565b60008181807f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce9919061179e565b8310610d0e5760405160e260020a6309afba81028152600481018490526024016102bd565b8015610d3d57610d3d7f00000000000000000000000000000000000000000000000000000000000000006102f1565b84610d47336103bb565b6040517f94d71bc400000000000000000000000000000000000000000000000000000000815262ffffff8816600482015260248101879052600160a060020a037f000000000000000000000000000000000000000000000000000000000000000016906394d71bc49060440161050d565b6000828260017f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e43919061179e565b8310610e685760405160e260020a6309afba81028152600481018490526024016102bd565b8015610e9757610e977f00000000000000000000000000000000000000000000000000000000000000006102f1565b85610ea1336103bb565b60068860ff16101580610eb757508760ff166003145b15610ef3576040517f947448bc00000000000000000000000000000000000000000000000000000000815260ff891660048201526024016102bd565b60007f00000000000000000000000000000000000000000000000000000000000000006040517f3129e773000000000000000000000000000000000000000000000000000000008152600481018a9052909150600090600160a060020a03831690633129e77390602401600060405180830381865afa158015610f7a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fa29190810190611a65565b9050806020015160a00151518810610fff5760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c6964206f726465724964000000000000000000000000000000000060448201526064016102bd565b6000816020015160a00151898151811061101b5761101b611f22565b602002602001015160a0015190506003600581111561103c5761103c611c8b565b81600581111561104e5761104e611c8b565b148061106b5750600581600581111561106957611069611c8b565b145b156110a2576040517fe7dd7e7c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600160a060020a031663ef02617e8b8b8e60ff1660058111156110c8576110c8611c8b565b6040518463ffffffff1660e060020a0281526004016110e993929190611f51565b6020604051808303816000875af1158015611108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112c9190611b9b565b61117b5760405160e560020a62461bcd02815260206004820152601860248201527f53656c6c65723a204f7065726174696f6e206661696c6564000000000000000060448201526064016102bd565b60058b60ff16600581111561119257611192611c8b565b60058111156111a3576111a3611c8b565b0361123257600160a060020a038316635650c2e58b8b3360405160e060020a63ffffffff861602815260048101939093526024830191909152600160a060020a031660448201526064016020604051808303816000875af115801561120c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112309190611b9b565b505b5060019a9950505050505050505050565b60408051808201909152601d81527f4f6e6c79526f6c655374617475733a204e6f74207065726d6974746564000000602082015260008054909190600160a060020a0316806112a75760405160e560020a62461bcd0281526004016102bd90611ec5565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa1580156112f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131d9190611b9b565b829061133f5760405160e560020a62461bcd0281526004016102bd9190611efc565b506000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386161790555060019392505050565b808284106113965760405160e560020a62461bcd0281526004016102bd9190611efc565b50505050565b81600160a060020a031683600160a060020a03161481906113965760405160e560020a62461bcd0281526004016102bd9190611efc565b60005474010000000000000000000000000000000000000000900460ff16611427576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60005474010000000000000000000000000000000000000000900460ff1615611427576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806040838503121561149157600080fd5b50508035926020909101359150565b803560ff811681146114b157600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611508576115086114b6565b60405290565b604051610100810167ffffffffffffffff81118282101715611508576115086114b6565b6040516060810167ffffffffffffffff81118282101715611508576115086114b6565b60405160c0810167ffffffffffffffff81118282101715611508576115086114b6565b604051601f8201601f1916810167ffffffffffffffff811182821017156115a1576115a16114b6565b604052919050565b600067ffffffffffffffff8211156115c3576115c36114b6565b50601f01601f191660200190565b600082601f8301126115e257600080fd5b81356115f56115f0826115a9565b611578565b81815284602083860101111561160a57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561164057600080fd5b611649876114a0565b9550611657602088016114a0565b945060408701359350606087013567ffffffffffffffff8082111561167b57600080fd5b6116878a838b016115d1565b9450608089013591508082111561169d57600080fd5b6116a98a838b016115d1565b935060a08901359150808211156116bf57600080fd5b506116cc89828a016115d1565b9150509295509295509295565b6000602082840312156116eb57600080fd5b5035919050565b62ffffff8116811461170357600080fd5b50565b6000806040838503121561171957600080fd5b8235611724816116f2565b946020939093013593505050565b60008060006060848603121561174757600080fd5b611750846114a0565b95602085013595506040909401359392505050565b600160a060020a038116811461170357600080fd5b60006020828403121561178c57600080fd5b813561179781611765565b9392505050565b6000602082840312156117b057600080fd5b5051919050565b80516114b181611765565b60005b838110156117dd5781810151838201526020016117c5565b50506000910152565b600082601f8301126117f757600080fd5b81516118056115f0826115a9565b81815284602083860101111561181a57600080fd5b61182b8260208301602087016117c2565b949350505050565b80516114b1816116f2565b805163ffffffff811681146114b157600080fd5b8051600681106114b157600080fd5b60006040828403121561187357600080fd5b61187b6114e5565b9050815167ffffffffffffffff8082111561189557600080fd5b6118a1858386016117e6565b835260208401519150808211156118b757600080fd5b506118c4848285016117e6565b60208301525092915050565b600082601f8301126118e157600080fd5b8151602067ffffffffffffffff808311156118fe576118fe6114b6565b81830261190c838201611578565b938452858101830193838101908886111561192657600080fd5b84880192505b85831015611a06578251848111156119445760008081fd5b8801610100818b03601f190181131561195d5760008081fd5b61196561150e565b611970888401611833565b8152604061197f81850161183e565b89830152606080850151828401526080915081850151818401525060a06119a78186016117b7565b8284015260c091506119ba828601611852565b9083015260e084810151898111156119d25760008081fd5b6119e08f8c83890101611861565b83850152506119f08486016117b7565b908301525084525050918401919084019061192c565b98975050505050505050565b600060408284031215611a2457600080fd5b611a2c6114e5565b90508151600a8110611a3d57600080fd5b8152602082015167ffffffffffffffff811115611a5957600080fd5b6118c4848285016117e6565b600060208284031215611a7757600080fd5b815167ffffffffffffffff80821115611a8f57600080fd5b9083019060608286031215611aa357600080fd5b611aab611532565b8251611ab681611765565b8152602083015182811115611aca57600080fd5b830160c08188031215611adc57600080fd5b611ae4611555565b815181526020820151602082015260408201516040820152606082015184811115611b0e57600080fd5b611b1a898285016117e6565b606083015250608082015184811115611b3257600080fd5b611b3e898285016117e6565b60808301525060a082015184811115611b5657600080fd5b611b62898285016118d0565b60a083015250602083015250604083015182811115611b8057600080fd5b611b8c87828601611a12565b60408301525095945050505050565b600060208284031215611bad57600080fd5b8151801515811461179757600080fd5b60008151808452611bd58160208601602086016117c2565b601f01601f19169290920160200192915050565b6020815260ff825116602082015260ff6020830151166040820152604082015160608201526000606083015160e06080840152611c2a610100840182611bbd565b90506080840151601f19808584030160a0860152611c488383611bbd565b925060a08601519150808584030160c086015250611c668282611bbd565b91505060c0840151611c8360e0850182600160a060020a03169052565b509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60068110611cca57611cca611c8b565b9052565b6000815160408452611ce36040850182611bbd565b905060208301518482036020860152611cfc8282611bbd565b95945050505050565b600081518084526020808501808196508284028101915082860160005b85811015611dd35782840389528151805162ffffff1685528581015163ffffffff16868601526040808201519086015260608082015190860152608080820151600160a060020a03169086015260a0808201516101009190611d8682890182611cba565b505060c0808301518282890152611d9f83890182611cce565b9250505060e0808301519250611dbf81880184600160a060020a03169052565b509986019994505090840190600101611d22565b5091979650505050505050565b60008151600a8110611df457611df4611c8b565b8084525060208201516040602085015261182b6040850182611bbd565b60208152600160a060020a038251166020820152600060208301516060604084015280516080840152602081015160a0840152604081015160c0840152606081015160c060e0850152611e68610140850182611bbd565b90506080820151607f198086840301610100870152611e878383611bbd565b925060a0840151935080868403016101208701525050611ea78183611d05565b9150506040840151601f19848303016060850152611cfc8282611de0565b6020808252601f908201527f4f6e6c79526f6c655374617475733a204d616e61676572206e6f742073657400604082015260600190565b6020815260006117976020830184611bbd565b6020815260006117976020830184611d05565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b838152602081018390526060810161182b6040830184611cba56fe5061757361626c653a204f6e6c79526f6c655374617475732063616e2070617573655061757361626c653a204f6e6c79526f6c655374617475732063616e20756e7061757365a26469706673582212209ba16739e619c1c6eb81fdaca11a7645dd7e8f13e7eb1464057f0f086f589cfe64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d25760003560e060020a900480637132917111610090578063b33347f91161006a578063b33347f9146101c6578063c376c8ed146101d9578063dedfb104146101ec578063f1d588c5146101ff57600080fd5b806371329171146101985780638456cb59146101ab57806394d71bc4146101b357600080fd5b8062435da5146100d75780632a5f6de8146101075780633c6e0f371461012a5780633f4ba83a1461013d5780635c975abb146101475780636b9241fc1461016a575b600080fd5b6000546100ea90600160a060020a031681565b604051600160a060020a0390911681526020015b60405180910390f35b61011a61011536600461147e565b610212565b60405190151581526020016100fe565b61011a610138366004611627565b61055e565b610145610705565b005b60005474010000000000000000000000000000000000000000900460ff1661011a565b6040517f000000000000000000000000000000000000000000000000000000000000000081526020016100fe565b61011a6101a63660046116d9565b61084b565b610145610b1c565b61011a6101c1366004611706565b610c5f565b61011a6101d4366004611732565b610db8565b6001546100ea90600160a060020a031681565b6002546100ea90600160a060020a031681565b61011a61020d36600461177a565b611243565b60008281807f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029c919061179e565b83106102c65760405160e260020a6309afba81028152600481018490526024015b60405180910390fd5b80156103b5576103b57f00000000000000000000000000000000000000000000000000000000000000005b600160a060020a0316633129e773856040518263ffffffff1660e060020a02815260040161032191815260200190565b600060405180830381865afa15801561033e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103669190810190611a65565b6020015160a00151516040518060400160405280600f81526020017f496e76616c6964206f7264657249640000000000000000000000000000000000815250846113729092919063ffffffff16565b856104a4335b604080518082018252601581527f4f6e6c7953656c6c657220697320616c6c6f7765640000000000000000000000602082015290517f3129e77300000000000000000000000000000000000000000000000000000000815260048101859052600160a060020a037f00000000000000000000000000000000000000000000000000000000000000001690633129e77390602401600060405180830381865afa15801561046b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104939190810190611a65565b51600160a060020a0316919061139c565b6040517f2a5f6de80000000000000000000000000000000000000000000000000000000081526004810188905260248101879052600160a060020a037f00000000000000000000000000000000000000000000000000000000000000001690632a5f6de8906044015b6020604051808303816000875af115801561052c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105509190611b9b565b506001979650505050505050565b600085600a8160ff16106105a3576040517fb251f34600000000000000000000000000000000000000000000000000000000815260ff821660048201526024016102bd565b8760ff166000036105e5576040517f826aa25900000000000000000000000000000000000000000000000000000000815260ff891660048201526024016102bd565b7f76d4238e656870cfd07edd53351003d94e9c38a8ba032fa1c1014f7eef7f85167f0000000000000000000000000000000000000000000000000000000000000000600160a060020a031663f443914e6040518060e001604052808c60ff1681526020018b60ff1681526020018a81526020018981526020018881526020018781526020016106713390565b600160a060020a0316905260405160e060020a63ffffffff841602815261069b9190600401611be9565b6000604051808303816000875af11580156106ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106e29190810190611a65565b6040516106ef9190611e11565b60405180910390a1506001979650505050505050565b604051806060016040528060248152602001611f8f60249139600054600160a060020a03168061074a5760405160e560020a62461bcd0281526004016102bd90611ec5565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa15801561079c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c09190611b9b565b82906107e25760405160e560020a62461bcd0281526004016102bd9190611efc565b506107eb6113d3565b6000805474ff0000000000000000000000000000000000000000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a15050565b60008181807f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d5919061179e565b83106108fa5760405160e260020a6309afba81028152600481018490526024016102bd565b8015610929576109297f00000000000000000000000000000000000000000000000000000000000000006102f1565b84610933336103bb565b60007f00000000000000000000000000000000000000000000000000000000000000006040517f3129e77300000000000000000000000000000000000000000000000000000000815260048101899052909150600090600160a060020a03831690633129e77390602401600060405180830381865afa1580156109ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e29190810190611a65565b602081015160a001515190915015610a8957600254602082015160a001516040517f82a736f3000000000000000000000000000000000000000000000000000000008152600160a060020a03909216916382a736f391610a4491600401611f0f565b6020604051808303816000875af1158015610a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a879190611b9b565b505b6040517f7132917100000000000000000000000000000000000000000000000000000000815260048101899052600160a060020a038316906371329171906024016020604051808303816000875af1158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d9190611b9b565b50600198975050505050505050565b604051806060016040528060228152602001611f6d60229139600054600160a060020a031680610b615760405160e560020a62461bcd0281526004016102bd90611ec5565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa158015610bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd79190611b9b565b8290610bf95760405160e560020a62461bcd0281526004016102bd9190611efc565b50610c02611429565b6000805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861082c3390565b60008181807f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce9919061179e565b8310610d0e5760405160e260020a6309afba81028152600481018490526024016102bd565b8015610d3d57610d3d7f00000000000000000000000000000000000000000000000000000000000000006102f1565b84610d47336103bb565b6040517f94d71bc400000000000000000000000000000000000000000000000000000000815262ffffff8816600482015260248101879052600160a060020a037f000000000000000000000000000000000000000000000000000000000000000016906394d71bc49060440161050d565b6000828260017f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e43919061179e565b8310610e685760405160e260020a6309afba81028152600481018490526024016102bd565b8015610e9757610e977f00000000000000000000000000000000000000000000000000000000000000006102f1565b85610ea1336103bb565b60068860ff16101580610eb757508760ff166003145b15610ef3576040517f947448bc00000000000000000000000000000000000000000000000000000000815260ff891660048201526024016102bd565b60007f00000000000000000000000000000000000000000000000000000000000000006040517f3129e773000000000000000000000000000000000000000000000000000000008152600481018a9052909150600090600160a060020a03831690633129e77390602401600060405180830381865afa158015610f7a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fa29190810190611a65565b9050806020015160a00151518810610fff5760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c6964206f726465724964000000000000000000000000000000000060448201526064016102bd565b6000816020015160a00151898151811061101b5761101b611f22565b602002602001015160a0015190506003600581111561103c5761103c611c8b565b81600581111561104e5761104e611c8b565b148061106b5750600581600581111561106957611069611c8b565b145b156110a2576040517fe7dd7e7c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600160a060020a031663ef02617e8b8b8e60ff1660058111156110c8576110c8611c8b565b6040518463ffffffff1660e060020a0281526004016110e993929190611f51565b6020604051808303816000875af1158015611108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112c9190611b9b565b61117b5760405160e560020a62461bcd02815260206004820152601860248201527f53656c6c65723a204f7065726174696f6e206661696c6564000000000000000060448201526064016102bd565b60058b60ff16600581111561119257611192611c8b565b60058111156111a3576111a3611c8b565b0361123257600160a060020a038316635650c2e58b8b3360405160e060020a63ffffffff861602815260048101939093526024830191909152600160a060020a031660448201526064016020604051808303816000875af115801561120c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112309190611b9b565b505b5060019a9950505050505050505050565b60408051808201909152601d81527f4f6e6c79526f6c655374617475733a204e6f74207065726d6974746564000000602082015260008054909190600160a060020a0316806112a75760405160e560020a62461bcd0281526004016102bd90611ec5565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa1580156112f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131d9190611b9b565b829061133f5760405160e560020a62461bcd0281526004016102bd9190611efc565b506000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386161790555060019392505050565b808284106113965760405160e560020a62461bcd0281526004016102bd9190611efc565b50505050565b81600160a060020a031683600160a060020a03161481906113965760405160e560020a62461bcd0281526004016102bd9190611efc565b60005474010000000000000000000000000000000000000000900460ff16611427576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60005474010000000000000000000000000000000000000000900460ff1615611427576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806040838503121561149157600080fd5b50508035926020909101359150565b803560ff811681146114b157600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611508576115086114b6565b60405290565b604051610100810167ffffffffffffffff81118282101715611508576115086114b6565b6040516060810167ffffffffffffffff81118282101715611508576115086114b6565b60405160c0810167ffffffffffffffff81118282101715611508576115086114b6565b604051601f8201601f1916810167ffffffffffffffff811182821017156115a1576115a16114b6565b604052919050565b600067ffffffffffffffff8211156115c3576115c36114b6565b50601f01601f191660200190565b600082601f8301126115e257600080fd5b81356115f56115f0826115a9565b611578565b81815284602083860101111561160a57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561164057600080fd5b611649876114a0565b9550611657602088016114a0565b945060408701359350606087013567ffffffffffffffff8082111561167b57600080fd5b6116878a838b016115d1565b9450608089013591508082111561169d57600080fd5b6116a98a838b016115d1565b935060a08901359150808211156116bf57600080fd5b506116cc89828a016115d1565b9150509295509295509295565b6000602082840312156116eb57600080fd5b5035919050565b62ffffff8116811461170357600080fd5b50565b6000806040838503121561171957600080fd5b8235611724816116f2565b946020939093013593505050565b60008060006060848603121561174757600080fd5b611750846114a0565b95602085013595506040909401359392505050565b600160a060020a038116811461170357600080fd5b60006020828403121561178c57600080fd5b813561179781611765565b9392505050565b6000602082840312156117b057600080fd5b5051919050565b80516114b181611765565b60005b838110156117dd5781810151838201526020016117c5565b50506000910152565b600082601f8301126117f757600080fd5b81516118056115f0826115a9565b81815284602083860101111561181a57600080fd5b61182b8260208301602087016117c2565b949350505050565b80516114b1816116f2565b805163ffffffff811681146114b157600080fd5b8051600681106114b157600080fd5b60006040828403121561187357600080fd5b61187b6114e5565b9050815167ffffffffffffffff8082111561189557600080fd5b6118a1858386016117e6565b835260208401519150808211156118b757600080fd5b506118c4848285016117e6565b60208301525092915050565b600082601f8301126118e157600080fd5b8151602067ffffffffffffffff808311156118fe576118fe6114b6565b81830261190c838201611578565b938452858101830193838101908886111561192657600080fd5b84880192505b85831015611a06578251848111156119445760008081fd5b8801610100818b03601f190181131561195d5760008081fd5b61196561150e565b611970888401611833565b8152604061197f81850161183e565b89830152606080850151828401526080915081850151818401525060a06119a78186016117b7565b8284015260c091506119ba828601611852565b9083015260e084810151898111156119d25760008081fd5b6119e08f8c83890101611861565b83850152506119f08486016117b7565b908301525084525050918401919084019061192c565b98975050505050505050565b600060408284031215611a2457600080fd5b611a2c6114e5565b90508151600a8110611a3d57600080fd5b8152602082015167ffffffffffffffff811115611a5957600080fd5b6118c4848285016117e6565b600060208284031215611a7757600080fd5b815167ffffffffffffffff80821115611a8f57600080fd5b9083019060608286031215611aa357600080fd5b611aab611532565b8251611ab681611765565b8152602083015182811115611aca57600080fd5b830160c08188031215611adc57600080fd5b611ae4611555565b815181526020820151602082015260408201516040820152606082015184811115611b0e57600080fd5b611b1a898285016117e6565b606083015250608082015184811115611b3257600080fd5b611b3e898285016117e6565b60808301525060a082015184811115611b5657600080fd5b611b62898285016118d0565b60a083015250602083015250604083015182811115611b8057600080fd5b611b8c87828601611a12565b60408301525095945050505050565b600060208284031215611bad57600080fd5b8151801515811461179757600080fd5b60008151808452611bd58160208601602086016117c2565b601f01601f19169290920160200192915050565b6020815260ff825116602082015260ff6020830151166040820152604082015160608201526000606083015160e06080840152611c2a610100840182611bbd565b90506080840151601f19808584030160a0860152611c488383611bbd565b925060a08601519150808584030160c086015250611c668282611bbd565b91505060c0840151611c8360e0850182600160a060020a03169052565b509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60068110611cca57611cca611c8b565b9052565b6000815160408452611ce36040850182611bbd565b905060208301518482036020860152611cfc8282611bbd565b95945050505050565b600081518084526020808501808196508284028101915082860160005b85811015611dd35782840389528151805162ffffff1685528581015163ffffffff16868601526040808201519086015260608082015190860152608080820151600160a060020a03169086015260a0808201516101009190611d8682890182611cba565b505060c0808301518282890152611d9f83890182611cce565b9250505060e0808301519250611dbf81880184600160a060020a03169052565b509986019994505090840190600101611d22565b5091979650505050505050565b60008151600a8110611df457611df4611c8b565b8084525060208201516040602085015261182b6040850182611bbd565b60208152600160a060020a038251166020820152600060208301516060604084015280516080840152602081015160a0840152604081015160c0840152606081015160c060e0850152611e68610140850182611bbd565b90506080820151607f198086840301610100870152611e878383611bbd565b925060a0840151935080868403016101208701525050611ea78183611d05565b9150506040840151601f19848303016060850152611cfc8282611de0565b6020808252601f908201527f4f6e6c79526f6c655374617475733a204d616e61676572206e6f742073657400604082015260600190565b6020815260006117976020830184611bbd565b6020815260006117976020830184611d05565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b838152602081018390526060810161182b6040830184611cba56fe5061757361626c653a204f6e6c79526f6c655374617475732063616e2070617573655061757361626c653a204f6e6c79526f6c655374617475732063616e20756e7061757365a26469706673582212209ba16739e619c1c6eb81fdaca11a7645dd7e8f13e7eb1464057f0f086f589cfe64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOrder(uint8,uint256,uint256)": {
        "details": "Move order to the next stage. Example: A seller can accept or reject order but cannot cancel order i.e stage must not equal index 3.  Only the buyer can cancel.",
        "params": {
          "itemId": ": Item id/index/position.",
          "orderId": ": Order id/index/position.",
          "stageSelector": ": Stage selector should be in number since enums are index-based."
        }
      },
      "editPriceLimit(uint256,uint256)": {
        "details": "Edits price of an item.",
        "params": {
          "itemId": ": Item index.",
          "newPriceLimit": ": Latest price."
        }
      },
      "editQuantity(uint24,uint256)": {
        "params": {
          "itemId": ": Item index.",
          "newQuantity": ": New Quantity"
        }
      },
      "listItem(uint8,uint8,uint256,string,string,string)": {
        "details": "Add new Item to storeFront.",
        "params": {
          "categorySelector": ": Main category of item.",
          "description": ": Item description.",
          "imageUrI": ": Image urI i.e IPFS link to uploaded images.",
          "location": ": Seller's location/address.",
          "priceLimit": ": Price per unit of item.",
          "quantity": ": Quantity of item seller has to sell."
        }
      },
      "pause()": {
        "details": "Triggers stopped state. Requirements: Only owner role can call. - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeItem(uint256)": {
        "details": "Removes item from storefront.",
        "params": {
          "itemId": ": Item id"
        }
      },
      "setRoleManager(address)": {
        "params": {
          "newManager": ": New manager address"
        }
      },
      "unpause()": {
        "details": "Returns to normal state. Requirements: - Only owner role can call. - The contract must be paused."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "editQuantity(uint24,uint256)": {
        "notice": "Edit item quantity"
      },
      "setRoleManager(address)": {
        "notice": "Set RoleManager"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1278,
        "contract": "contracts/implementations/SellerV1.sol:SellerV1",
        "label": "roleManager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1358,
        "contract": "contracts/implementations/SellerV1.sol:SellerV1",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2107,
        "contract": "contracts/implementations/SellerV1.sol:SellerV1",
        "label": "uSDT",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)877"
      },
      {
        "astId": 3084,
        "contract": "contracts/implementations/SellerV1.sol:SellerV1",
        "label": "buyerContract",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)877": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      }
    }
  }
}