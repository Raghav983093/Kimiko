{
  "address": "0xe09e23F8a8032BB39326098802c970f9b48D726C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        }
      ],
      "name": "getRole",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "removeRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rolesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "newRoles",
          "type": "address[]"
        }
      ],
      "name": "setPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x99114b3318c57ef296ef5444646455fe42dbd7719169dd507fe5abf154e7530f",
  "receipt": {
    "to": null,
    "from": "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "contractAddress": "0xe09e23F8a8032BB39326098802c970f9b48D726C",
    "transactionIndex": 6,
    "gasUsed": "450532",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xdfe90a26cb6fd9397bc8d8d30be3bc82df0a543ad1fbd2d85fdfa36743675ae6",
    "transactionHash": "0x99114b3318c57ef296ef5444646455fe42dbd7719169dd507fe5abf154e7530f",
    "logs": [],
    "blockNumber": 16446110,
    "cumulativeGasUsed": "1100073",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ac0fce825edebd2a7665c7bbef4eae80",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"}],\"name\":\"getRole\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"removeRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newRoles\",\"type\":\"address[]\"}],\"name\":\"setPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"(Bobeu)\",\"kind\":\"dev\",\"methods\":{\"getRole(uint256)\":{\"details\":\"Returns role variable. Can be called externally by contracts.\",\"params\":{\"roleId\":\": Owner Id. \"}},\"hasRole(address)\":{\"details\":\"Check if target is an role.\",\"params\":{\"target\":\": Target address.\"}},\"removeRole(address)\":{\"details\":\"Remove an address as role.\",\"params\":{\"target\":\": Target address\"}},\"renounceRole()\":{\"details\":\"An role can renounce their roleship. This however will not leave the contract empty without an role. There must be at least one role left.\"},\"setPermission(address[])\":{\"details\":\"Add a new role address\",\"params\":{\"newRoles\":\": New roles\"}}},\"title\":\"RoleBased \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"removeRole(address)\":{\"notice\":\"Only address with role permission can remove another role.\"},\"renounceRole()\":{\"notice\":\"Only address with role permission can renounce roleship.\"},\"roles(uint256)\":{\"notice\":\"Mapping of rolesCount to addresses. A valid id will return a mapped role.\"},\"rolesCount()\":{\"notice\":\"Number of roles.\"},\"setPermission(address[])\":{\"notice\":\"Only address with role permission can add another role.\"}},\"notice\":\"Standalone contract for managing roleship in kimiko protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementations/RoleBased.sol\":\"RoleBased\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/implementations/RoleBased.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { IRoleBased } from \\\"../interfaces/IRoleBased.sol\\\";\\r\\n/**\\r\\n * @title MsgSender \\r\\n * @author (Bobeu)\\r\\n * @notice Non-deployable contract simply returning the calling account.\\r\\n */\\r\\nabstract contract MsgSender {\\r\\n    function _msgSender() internal view returns(address sender) {\\r\\n        sender = msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title RoleBased \\r\\n * @author (Bobeu)\\r\\n * @notice Standalone contract for managing roleship in kimiko protocol.\\r\\n */\\r\\ncontract RoleBased is IRoleBased, MsgSender{\\r\\n    /**\\r\\n     * @notice Number of roles.\\r\\n     */\\r\\n    uint public rolesCount;\\r\\n\\r\\n    /**\\r\\n     * @notice Addresses with roleship permission.\\r\\n     */\\r\\n    \\r\\n    mapping (address => bool) private _isRoleBased;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of rolesCount to addresses.\\r\\n     * A valid id will return a mapped role.\\r\\n     */\\r\\n    mapping (uint => address) public roles;\\r\\n\\r\\n    /**\\r\\n     * @dev Only role is allowed.\\r\\n     */\\r\\n    modifier onlyRoleStatus {\\r\\n        require(_isRoleBased[_msgSender()], \\\"Oop! Caller is not recognized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _setRole(_msgSender(), true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns role variable.\\r\\n     */\\r\\n    function _getRole(uint roleId) \\r\\n        internal \\r\\n        view \\r\\n        returns(address _role) \\r\\n    {\\r\\n        _role = roles[roleId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add or remove target address as role.\\r\\n     * @param target: Target address.\\r\\n     * @notice 'target' parameter must not be empty.\\r\\n     */\\r\\n    function _setRole(\\r\\n        address target,\\r\\n        bool add\\r\\n    ) \\r\\n        private \\r\\n    {\\r\\n        require(target != address(0), \\\"Simplifi RoleBased: 'target' parameter is empty\\\");\\r\\n        add? (_isRoleBased[target] = true, rolesCount ++) : (_isRoleBased[target] = false, rolesCount --);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new role address\\r\\n     * @param newRoles: New roles\\r\\n     * @notice Only address with role permission can add another role.\\r\\n     */\\r\\n    function setPermission(\\r\\n        address[] memory newRoles\\r\\n    ) \\r\\n        external\\r\\n        onlyRoleStatus\\r\\n        returns(bool) \\r\\n    {\\r\\n        bool rt = true;\\r\\n        for(uint r = 0; r < newRoles.length; r++) {\\r\\n            _setRole(newRoles[r], rt);\\r\\n        }\\r\\n        return rt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an address as role.\\r\\n     * @param target: Target address\\r\\n     * @notice Only address with role permission can remove another role.\\r\\n     */\\r\\n    function removeRole(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        onlyRoleStatus\\r\\n        returns(bool) \\r\\n    {\\r\\n        _setRole(target, false);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev An role can renounce their roleship. This however will not leave the\\r\\n     * contract empty without an role. There must be at least one role left.\\r\\n     * @notice Only address with role permission can renounce roleship.\\r\\n     */\\r\\n    function renounceRole() \\r\\n        external\\r\\n        onlyRoleStatus\\r\\n        returns(bool) \\r\\n    {\\r\\n        require(rolesCount > 1, \\\"At least 2 roles is required for one to leave\\\"); \\r\\n        _setRole(_msgSender(), false);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns role variable.\\r\\n     * Can be called externally by contracts.\\r\\n     * @param roleId : Owner Id. \\r\\n     */\\r\\n    function getRole(\\r\\n        uint roleId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address) \\r\\n    {\\r\\n        return _getRole(roleId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if target is an role.\\r\\n     * @param target : Target address.\\r\\n     */\\r\\n    function hasRole(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool) \\r\\n    {\\r\\n        return _isRoleBased[target];\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4b454fef8fd2ede49a613a476ff57d704bffef8a2480c28c499e6aaaae11a314\",\"license\":\"MIT\"},\"contracts/interfaces/IRoleBased.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/**\\r\\n * @title IRoleBased \\r\\n * Interface of the RoleBased contract\\r\\n * @author Bobeu\\r\\n */\\r\\ninterface IRoleBased {\\r\\n    function setPermission(\\r\\n        address[] memory newRoles\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function removeRole(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function renounceRole() \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function getRole(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address);\\r\\n\\r\\n    function hasRole(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool);\\r\\n}\",\"keccak256\":\"0x62204a90dd90e628250e4e220931adac9bba8dbc1b188daa9271f02c55d1a970\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061003561002564010000000061003a810204565b600164010000000061003e810204565b6101af565b3390565b600160a060020a0382166100d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f53696d706c69666920526f6c6542617365643a2027746172676574272070617260448201527f616d6574657220697320656d7074790000000000000000000000000000000000606482015260840160405180910390fd5b8061011357600160a060020a0382166000908152600160205260408120805460ff191690558054818061010a8361017f565b9190505561014a565b600160a060020a03821660009081526001602081905260408220805460ff191682179055815490918061014583610196565b919050555b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008161018e5761018e610150565b506000190190565b6000600182016101a8576101a8610150565b5060010190565b61064f806101be6000396000f3fe608060405234801561001057600080fd5b506004361061009a576000357c010000000000000000000000000000000000000000000000000000000090048063b8517dd811610078578063b8517dd814610134578063bfda4a491461014b578063dfe23f8414610174578063ea41c7f41461017c57600080fd5b80634762155d1461009f5780635312fdc2146100c75780637ef09bca14610108575b600080fd5b6100b26100ad366004610426565b61018f565b60405190151581526020015b60405180910390f35b6100f06100d5366004610448565b600090815260026020526040902054600160a060020a031690565b604051600160a060020a0390911681526020016100be565b6100b2610116366004610426565b600160a060020a031660009081526001602052604090205460ff1690565b61013d60005481565b6040519081526020016100be565b6100f0610159366004610448565b600260205260009081526040902054600160a060020a031681565b6100b26101de565b6100b261018a366004610490565b61029c565b3360009081526001602052604081205460ff166101ca5760405160e560020a62461bcd0281526004016101c190610554565b60405180910390fd5b6101d5826000610318565b5060015b919050565b3360009081526001602052604081205460ff166102105760405160e560020a62461bcd0281526004016101c190610554565b60016000541161028b5760405160e560020a62461bcd02815260206004820152602d60248201527f4174206c65617374203220726f6c657320697320726571756972656420666f7260448201527f206f6e6520746f206c656176650000000000000000000000000000000000000060648201526084016101c1565b610296336000610318565b50600190565b3360009081526001602052604081205460ff166102ce5760405160e560020a62461bcd0281526004016101c190610554565b600160005b8351811015610311576102ff8482815181106102f1576102f161058b565b602002602001015183610318565b80610309816105e9565b9150506102d3565b5092915050565b600160a060020a0382166103975760405160e560020a62461bcd02815260206004820152602f60248201527f53696d706c69666920526f6c6542617365643a2027746172676574272070617260448201527f616d6574657220697320656d707479000000000000000000000000000000000060648201526084016101c1565b806103d257600160a060020a0382166000908152600160205260408120805460ff19169055805481806103c983610602565b91905055610409565b600160a060020a03821660009081526001602081905260408220805460ff1916821790558154909180610404836105e9565b919050555b50505050565b8035600160a060020a03811681146101d957600080fd5b60006020828403121561043857600080fd5b6104418261040f565b9392505050565b60006020828403121561045a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208083850312156104a357600080fd5b823567ffffffffffffffff808211156104bb57600080fd5b818501915085601f8301126104cf57600080fd5b8135818111156104e1576104e1610461565b838102604051601f19603f8301168101818110858211171561050557610505610461565b60405291825284820192508381018501918883111561052357600080fd5b938501935b82851015610548576105398561040f565b84529385019392850192610528565b98975050505050505050565b6020808252601d908201527f4f6f70212043616c6c6572206973206e6f74207265636f676e697a6564000000604082015260600190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600182016105fb576105fb6105ba565b5060010190565b600081610611576106116105ba565b50600019019056fea264697066735822122002206d392f3e4cff30dcd506631454dbdb602474ec7695641f990cfb14563b8064736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009a576000357c010000000000000000000000000000000000000000000000000000000090048063b8517dd811610078578063b8517dd814610134578063bfda4a491461014b578063dfe23f8414610174578063ea41c7f41461017c57600080fd5b80634762155d1461009f5780635312fdc2146100c75780637ef09bca14610108575b600080fd5b6100b26100ad366004610426565b61018f565b60405190151581526020015b60405180910390f35b6100f06100d5366004610448565b600090815260026020526040902054600160a060020a031690565b604051600160a060020a0390911681526020016100be565b6100b2610116366004610426565b600160a060020a031660009081526001602052604090205460ff1690565b61013d60005481565b6040519081526020016100be565b6100f0610159366004610448565b600260205260009081526040902054600160a060020a031681565b6100b26101de565b6100b261018a366004610490565b61029c565b3360009081526001602052604081205460ff166101ca5760405160e560020a62461bcd0281526004016101c190610554565b60405180910390fd5b6101d5826000610318565b5060015b919050565b3360009081526001602052604081205460ff166102105760405160e560020a62461bcd0281526004016101c190610554565b60016000541161028b5760405160e560020a62461bcd02815260206004820152602d60248201527f4174206c65617374203220726f6c657320697320726571756972656420666f7260448201527f206f6e6520746f206c656176650000000000000000000000000000000000000060648201526084016101c1565b610296336000610318565b50600190565b3360009081526001602052604081205460ff166102ce5760405160e560020a62461bcd0281526004016101c190610554565b600160005b8351811015610311576102ff8482815181106102f1576102f161058b565b602002602001015183610318565b80610309816105e9565b9150506102d3565b5092915050565b600160a060020a0382166103975760405160e560020a62461bcd02815260206004820152602f60248201527f53696d706c69666920526f6c6542617365643a2027746172676574272070617260448201527f616d6574657220697320656d707479000000000000000000000000000000000060648201526084016101c1565b806103d257600160a060020a0382166000908152600160205260408120805460ff19169055805481806103c983610602565b91905055610409565b600160a060020a03821660009081526001602081905260408220805460ff1916821790558154909180610404836105e9565b919050555b50505050565b8035600160a060020a03811681146101d957600080fd5b60006020828403121561043857600080fd5b6104418261040f565b9392505050565b60006020828403121561045a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208083850312156104a357600080fd5b823567ffffffffffffffff808211156104bb57600080fd5b818501915085601f8301126104cf57600080fd5b8135818111156104e1576104e1610461565b838102604051601f19603f8301168101818110858211171561050557610505610461565b60405291825284820192508381018501918883111561052357600080fd5b938501935b82851015610548576105398561040f565b84529385019392850192610528565b98975050505050505050565b6020808252601d908201527f4f6f70212043616c6c6572206973206e6f74207265636f676e697a6564000000604082015260600190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600182016105fb576105fb6105ba565b5060010190565b600081610611576106116105ba565b50600019019056fea264697066735822122002206d392f3e4cff30dcd506631454dbdb602474ec7695641f990cfb14563b8064736f6c63430008140033",
  "devdoc": {
    "author": "(Bobeu)",
    "kind": "dev",
    "methods": {
      "getRole(uint256)": {
        "details": "Returns role variable. Can be called externally by contracts.",
        "params": {
          "roleId": ": Owner Id. "
        }
      },
      "hasRole(address)": {
        "details": "Check if target is an role.",
        "params": {
          "target": ": Target address."
        }
      },
      "removeRole(address)": {
        "details": "Remove an address as role.",
        "params": {
          "target": ": Target address"
        }
      },
      "renounceRole()": {
        "details": "An role can renounce their roleship. This however will not leave the contract empty without an role. There must be at least one role left."
      },
      "setPermission(address[])": {
        "details": "Add a new role address",
        "params": {
          "newRoles": ": New roles"
        }
      }
    },
    "title": "RoleBased ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "removeRole(address)": {
        "notice": "Only address with role permission can remove another role."
      },
      "renounceRole()": {
        "notice": "Only address with role permission can renounce roleship."
      },
      "roles(uint256)": {
        "notice": "Mapping of rolesCount to addresses. A valid id will return a mapped role."
      },
      "rolesCount()": {
        "notice": "Number of roles."
      },
      "setPermission(address[])": {
        "notice": "Only address with role permission can add another role."
      }
    },
    "notice": "Standalone contract for managing roleship in kimiko protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2854,
        "contract": "contracts/implementations/RoleBased.sol:RoleBased",
        "label": "rolesCount",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2859,
        "contract": "contracts/implementations/RoleBased.sol:RoleBased",
        "label": "_isRoleBased",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2864,
        "contract": "contracts/implementations/RoleBased.sol:RoleBased",
        "label": "roles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}