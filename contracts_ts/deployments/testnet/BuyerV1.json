{
  "address": "0x99C62eF80CA0ECc942994d407ecA89dDE3625F7d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IFactory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_uSDT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roleBasedManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "CallerNotTheCustomer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "InvalidItemId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "OrderAlreadyCancelled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "name": "QuantityCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "QuantityShouldBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "requested",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "expected",
          "type": "uint24"
        }
      ],
      "name": "RequestedQuantityExceedAvailableQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCommitmentFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "UnsupportedCategory",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "confirmOnReceipt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "newQuantity",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newOfferPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "editOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercentage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterfaceId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeReceiver",
          "type": "address"
        }
      ],
      "name": "paySeller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "quantity",
              "type": "uint24"
            },
            {
              "internalType": "uint32",
              "name": "date",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "offerPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commitment",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "customer",
              "type": "address"
            },
            {
              "internalType": "enum IFactory.Stage",
              "name": "stage",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "destination",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "contacts",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IFactory.Info",
              "name": "info",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "firstSigner",
              "type": "address"
            }
          ],
          "internalType": "struct IFactory.Order[]",
          "name": "orders",
          "type": "tuple[]"
        }
      ],
      "name": "refund",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "newFeePercentage",
          "type": "uint8"
        }
      ],
      "name": "setFeePercentage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "setRoleManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "requestedQuantity",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offerPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "destinationAddr",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contact",
          "type": "string"
        }
      ],
      "name": "startOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uSDT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x55111711e81c582054a36ab1a9c67e2c8f24cf0746e022ee70eca58db08195f5",
  "receipt": {
    "to": null,
    "from": "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "contractAddress": "0x99C62eF80CA0ECc942994d407ecA89dDE3625F7d",
    "transactionIndex": 4,
    "gasUsed": "2242233",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xbd4473ce64f4244ecb3edc34135ff4a5fabd3b95f3c2e3130bfcaf9ef247100d",
    "transactionHash": "0x55111711e81c582054a36ab1a9c67e2c8f24cf0746e022ee70eca58db08195f5",
    "logs": [],
    "blockNumber": 16446124,
    "cumulativeGasUsed": "2616449",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1a375D2aEF1370B306B4aCc9d930e3C2defaBF9c",
    "0xb28721f7b977D64F9401161EA91bC25D59F25308",
    "0xe09e23F8a8032BB39326098802c970f9b48D726C"
  ],
  "numDeployments": 1,
  "solcInputHash": "ccab1e199e972aa8de0cd751f703f256",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_uSDT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roleBasedManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"CallerNotTheCustomer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InvalidItemId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"OrderAlreadyCancelled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"QuantityCannotBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"QuantityShouldBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"requested\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"expected\",\"type\":\"uint24\"}],\"name\":\"RequestedQuantityExceedAvailableQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCommitmentFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"UnsupportedCategory\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"confirmOnReceipt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"newQuantity\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newOfferPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"editOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterfaceId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"paySeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"quantity\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"date\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"internalType\":\"enum IFactory.Stage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"destination\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"contacts\",\"type\":\"bytes\"}],\"internalType\":\"struct IFactory.Info\",\"name\":\"info\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"firstSigner\",\"type\":\"address\"}],\"internalType\":\"struct IFactory.Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFeePercentage\",\"type\":\"uint8\"}],\"name\":\"setFeePercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setRoleManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"requestedQuantity\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"destinationAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contact\",\"type\":\"string\"}],\"name\":\"startOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uSDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"cancelOrder(uint256,uint256)\":{\"details\":\"Buyer cancels order.\",\"params\":{\"itemId\":\": Item index.\",\"orderId\":\": Position of order in the list/Order index.\"}},\"confirmOnReceipt(uint256,uint256)\":{\"details\":\"Buyer confirm receipt of goods. On confirmation, the trade is finalized  and payment is released to the seller.\",\"params\":{\"itemId\":\": Item Id.\",\"orderId\":\": Order Id.\"}},\"editOrder(uint24,uint256,uint256,uint256)\":{\"details\":\"Edit order.\",\"params\":{\"itemId\":\": Item index.\",\"newOfferPrice\":\": New offer price.\",\"newQuantity\":\": New quantity.\",\"orderId\":\": Position of order in the list/Order index.\"}},\"pause()\":{\"details\":\"Triggers stopped state. Requirements: Only owner role can call. - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"paySeller(uint256,address,address)\":{\"details\":\"Buyer pays seller. \",\"params\":{\"amount\":\": Amount to pay.\",\"seller\":\": Seller's address.\"}},\"refund((uint24,uint32,uint256,uint256,address,uint8,(bytes,bytes),address)[])\":{\"details\":\"Refunds Buyer their commitment. This happens when Sellers wish to remove their ADs\",\"params\":{\"orders\":\": Order struct data. See IFactory.Order.\"}},\"setRoleManager(address)\":{\"params\":{\"newManager\":\": New manager address\"}},\"startOrder(uint24,uint256,uint256,string,string)\":{\"details\":\"Buyer makes order for a specific good item showing they're interest indeed. Note: Buyers maintain an internal wallet created automatically for them on signUp. Buyer should give approval to spend before executing this function.\",\"params\":{\"contact\":\": Buyer's contract i.e phone/email. Can be concatenate.  Note: While placing order, the buyer make commitment in full amount of the weighted offerPrice and qty.\",\"destinationAddr\":\": Address where item should be dispatched if order goes well.\",\"itemId\":\": Item Id.\",\"offerPrice\":\": The Price buyer is willing to pay per unit of listed item.\",\"requestedQuantity\":\": Quantity of item user wants to negotiate for.\"}},\"unpause()\":{\"details\":\"Returns to normal state. Requirements: - Only owner role can call. - The contract must be paused.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"paySeller(uint256,address,address)\":{\"notice\":\"Fee is deducted.\"},\"setFeePercentage(uint8)\":{\"notice\":\"------> PUBLIC FUNCTIONS <-------  \"},\"setRoleManager(address)\":{\"notice\":\"Set RoleManager\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementations/BuyerV1.sol\":\"BuyerV1\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nlibrary Lib {\\r\\n    function isZeroAddress(address target) internal pure returns(bool _isZero) {\\r\\n        _isZero = target == address(0);\\r\\n    }\\r\\n\\r\\n    function notEqualInAddress(address a, address b, string memory errorMessage) internal pure {\\r\\n        require( a != b, errorMessage);\\r\\n    }\\r\\n\\r\\n    function equalInAddress(address a, address b, string memory errorMessage)internal pure {\\r\\n        require( a == b, errorMessage);\\r\\n    }\\r\\n\\r\\n    function assertEqual(uint a, uint b, string memory errorMessage) internal pure {\\r\\n        require( a == b, errorMessage);\\r\\n    }\\r\\n\\r\\n    function assertGThan(uint a, uint b, string memory errorMessage) internal pure {\\r\\n        require( a > b, errorMessage);\\r\\n    }\\r\\n\\r\\n    function assertLThan(uint a, uint b, string memory errorMessage) internal pure {\\r\\n        require( a < b, errorMessage);\\r\\n    }\\r\\n\\r\\n    function assertGThanOrEqual(uint a, uint b, string memory errorMessage) internal pure {\\r\\n        require( a >= b, errorMessage);\\r\\n    }\\r\\n\\r\\n    function toBytes(string memory str) internal pure returns(bytes memory) {\\r\\n        return abi.encode(str);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Percentage base\\r\\n     */\\r\\n    function _getBase() internal pure returns(uint16 base) {\\r\\n        base = 10000;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Computes platform fee.\\r\\n        @param makerRate : The amount of fee (in %) charged by the platform\\r\\n            Note : Raw rate must multiply by 100 to get the expected value i.e\\r\\n            if maker rate is 0.1%, it should be parsed as 0.1 * 100 = 10.\\r\\n            See `_getPercentage()`.\\r\\n        @param amount should be in decimals.\\r\\n    */\\r\\n    function computeFee(\\r\\n        uint amount, \\r\\n        uint16 makerRate\\r\\n    ) \\r\\n        internal \\r\\n        pure \\r\\n        returns (uint mFee) \\r\\n    {\\r\\n        mFee = _getPercentage(amount, makerRate);\\r\\n    }\\r\\n\\r\\n    /**     @dev Calculation of percentage.\\r\\n        *   This is how we calculate percentage to arrive at expected value with \\r\\n        *   good precision.\\r\\n        *   We chose a base value (numerator as 10000) repesenting a 100% of input value. This means if Alice wish to set \\r\\n        *   her interest rate to 0.05%, she only need to multiply it by 100 i.e 0.05 * 100 = 5. Her input will be 5. \\r\\n        *   Since Solidity do not accept decimals as input, in our context, the minimum value to parse is '0' indicating \\r\\n        *   zero interest rate. If the platform wish to set interest at least, the minimum value will be 1 reprensenting 0.01%.\\r\\n        *   The minimum interest rate to set is 0.01% if interest must be set at least.\\r\\n        *   @notice To reiterate, raw interest must be multiplied by 100 before giving as input. \\r\\n        *   @param principal : The principal value on which the interest is based. Value should be in decimals.\\r\\n        *   @param interest : Interest rate. \\r\\n        *   \\r\\n        *   Rules\\r\\n        *   -----\\r\\n        *   - Principal cannot be less than base.\\r\\n        *   - Interest cannot be greater than (2 ^ 16) - 1\\r\\n    */\\r\\n    function _getPercentage(\\r\\n        uint principal, \\r\\n        uint16 interest\\r\\n    )\\r\\n        internal \\r\\n        pure \\r\\n        returns (uint _return) \\r\\n    {\\r\\n        uint16 base = _getBase(); \\r\\n        if(interest == 0 || principal == 0) return 0;\\r\\n        assertLThan(interest, type(uint16).max, \\\"Interest overflow\\\");\\r\\n        assertGThan(principal, base, \\\"Principal should be greater than 10000\\\");\\r\\n        unchecked {\\r\\n            _return = (principal * interest) / base;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x401e116d26d725613a77b8c6bcf47ff115b3000b4294d0e554183559caabbee8\",\"license\":\"MIT\"},\"contracts/abstracts/OnlyRoleStatus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { MsgSender, RoleBased } from \\\"../implementations/RoleBased.sol\\\";\\r\\nimport { IRoleBased } from \\\"../interfaces/IRoleBased.sol\\\";\\r\\n\\r\\nabstract contract OnlyRoleStatus is MsgSender {\\r\\n    address public roleManager;\\r\\n\\r\\n    constructor(address _roleManager)\\r\\n    {\\r\\n        _setRoleManager(_roleManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Caller must have owner role before execeution can proceed.\\r\\n     * The 'errorMessage' argument can be used to return error specific to \\r\\n     * a context e.g function call. \\r\\n     * @param errorMessage : Custom error message\\r\\n     */\\r\\n    modifier onlyRoleStatus(string memory errorMessage) {\\r\\n        address mgr = roleManager;\\r\\n        require(mgr != address(0), \\\"OnlyRoleStatus: Manager not set\\\");\\r\\n        require(IRoleBased(mgr).hasRole(_msgSender()), errorMessage);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _setRoleManager(\\r\\n        address newManager\\r\\n    )\\r\\n        private\\r\\n    {\\r\\n        roleManager = newManager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set RoleManager\\r\\n     * @param newManager : New manager address\\r\\n     */\\r\\n    function setRoleManager(\\r\\n        address newManager\\r\\n    )\\r\\n        public\\r\\n        onlyRoleStatus(\\\"OnlyRoleStatus: Not permitted\\\")\\r\\n        returns(bool)\\r\\n    {\\r\\n        _setRoleManager(newManager);\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x13a383e94cace80b9a412c6c76225579a10c0e0b0fd8377c0fd07b6fe7da4df8\",\"license\":\"MIT\"},\"contracts/abstracts/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { OnlyRoleStatus } from \\\"./OnlyRoleStatus.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n * \\r\\n * We use part of the Openzeppelin Pausable contract to supplement our strategy.\\r\\n * Thanks to the OZ team.\\r\\n */\\r\\nabstract contract Pausable is OnlyRoleStatus {\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev The operation failed because the contract is paused.\\r\\n     */\\r\\n    error EnforcedPause();\\r\\n\\r\\n    /**\\r\\n     * @dev The operation failed because the contract is not paused.\\r\\n     */\\r\\n    error ExpectedPause();\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor(\\r\\n        address _roleManager\\r\\n    ) OnlyRoleStatus(_roleManager) {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        _requireNotPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        _requirePaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is paused.\\r\\n     */\\r\\n    function _requireNotPaused() internal view {\\r\\n        if (paused()) {\\r\\n            revert EnforcedPause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is not paused.\\r\\n     */\\r\\n    function _requirePaused() internal view virtual {\\r\\n        if (!paused()) {\\r\\n            revert ExpectedPause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * Only owner role can call.\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function pause() \\r\\n        public \\r\\n        onlyRoleStatus(\\\"Pausable: OnlyRoleStatus can pause\\\") \\r\\n        whenNotPaused \\r\\n    {\\r\\n        _paused = true; \\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Only owner role can call.\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function unpause() \\r\\n        public \\r\\n        onlyRoleStatus(\\\"Pausable: OnlyRoleStatus can unpause\\\") \\r\\n        whenPaused \\r\\n    {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb80f9e63b4f88eeca077b1cb89749cfb45084d1f3f122ac330e393d504068f39\",\"license\":\"MIT\"},\"contracts/implementations/BuyerV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { IFactory } from \\\"../interfaces/IFactory.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { Lib } from \\\"../Lib.sol\\\";\\r\\nimport { Common } from \\\"./Common.sol\\\";\\r\\nimport { IBuyer } from \\\"../interfaces/IBuyer.sol\\\";\\r\\n\\r\\ncontract BuyerV1 is Common, IBuyer {\\r\\n    using Lib for *;\\r\\n\\r\\n    // Errors\\r\\n    error QuantityShouldBeGreaterThanZero(uint8);\\r\\n    error CallerNotTheCustomer(address);\\r\\n    error TransferCommitmentFailed();\\r\\n    error OrderAlreadyCancelled(uint);\\r\\n    error QuantityCannotBeZero(uint24);\\r\\n    error RequestedQuantityExceedAvailableQuantity(uint24 requested, uint24 expected);\\r\\n\\r\\n    // Platform fee in %\\r\\n    uint8 public feePercentage;\\r\\n\\r\\n    /**\\r\\n     * @notice Contract identifier\\r\\n     * We use it to identify which contract is calling in the factory contract.\\r\\n     */\\r\\n    bytes32 immutable interfaceId;\\r\\n\\r\\n    constructor(\\r\\n        IFactory _factory, \\r\\n        IERC20 _uSDT, \\r\\n        address _roleBasedManager\\r\\n    ) \\r\\n        Common(_factory, _uSDT, _roleBasedManager) \\r\\n    {\\r\\n        feePercentage = 50; // 0.05%\\r\\n        interfaceId = keccak256(abi.encodePacked(\\\"BUYER\\\"));\\r\\n    }\\r\\n\\r\\n    /** ------> PUBLIC FUNCTIONS <-------  */\\r\\n\\r\\n    function setFeePercentage(uint8 newFeePercentage) public onlyRoleStatus(\\\"Buyer: Not the owner\\\") returns (bool) {\\r\\n        feePercentage = newFeePercentage;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buyer makes order for a specific good item showing they're interest indeed.\\r\\n     * Note: Buyers maintain an internal wallet created automatically for them on signUp.\\r\\n     * Buyer should give approval to spend before executing this function.\\r\\n     * @param itemId : Item Id.\\r\\n     * @param requestedQuantity : Quantity of item user wants to negotiate for.\\r\\n     * @param offerPrice: The Price buyer is willing to pay per unit of listed item.\\r\\n     * @param  destinationAddr: Address where item should be dispatched if order goes well.\\r\\n     * @param contact: Buyer's contract i.e phone/email. Can be concatenate.\\r\\n     * \\r\\n     * Note: While placing order, the buyer make commitment in full amount of the weighted offerPrice and qty.\\r\\n     */\\r\\n    function startOrder(\\r\\n        uint24 requestedQuantity,\\r\\n        uint itemId,\\r\\n        uint offerPrice,\\r\\n        string memory destinationAddr,\\r\\n        string memory contact\\r\\n    ) \\r\\n        public \\r\\n        validateIds(itemId, 0, false)\\r\\n    {\\r\\n        (uint allowance, uint24 initialQty) = _initialCheck(_wrappedFactory().getItem(itemId), _msgSender(), requestedQuantity, offerPrice);\\r\\n        unchecked {\\r\\n            _wrappedFactory().placeOrder(\\r\\n                IFactory.Order(\\r\\n                    requestedQuantity, \\r\\n                    uint32(block.timestamp), \\r\\n                    offerPrice, \\r\\n                    allowance,\\r\\n                    _msgSender(), \\r\\n                    IFactory.Stage.COMMIT,\\r\\n                    IFactory.Info(destinationAddr.toBytes(), contact.toBytes()),\\r\\n                    address(0)\\r\\n                ), \\r\\n                itemId,\\r\\n                initialQty - requestedQuantity\\r\\n            );\\r\\n        }\\r\\n        if(!IERC20(uSDT).transferFrom(_msgSender(), address(this), allowance)) revert TransferCommitmentFailed();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Edit order.\\r\\n     * @param newQuantity : New quantity.\\r\\n     * @param itemId: Item index.\\r\\n     * @param newOfferPrice : New offer price.\\r\\n     * @param orderId : Position of order in the list/Order index.\\r\\n     */\\r\\n    function editOrder(\\r\\n        uint24 newQuantity,\\r\\n        uint itemId,\\r\\n        uint newOfferPrice,\\r\\n        uint orderId\\r\\n    ) \\r\\n        public\\r\\n        validateIds(itemId, orderId, true)\\r\\n        returns(bool)\\r\\n    {\\r\\n        (IFactory.Item memory item, IFactory iFact) = _requireIsABuyer(itemId, orderId, _msgSender());\\r\\n        _checkOrderStage(item, orderId);\\r\\n        (uint allowance,) = _initialCheck(item, _msgSender(), newQuantity, newOfferPrice);\\r\\n        iFact.editOrder(newQuantity, itemId, orderId, newOfferPrice, allowance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buyer cancels order.\\r\\n     * @param itemId: Item index.\\r\\n     * @param orderId : Position of order in the list/Order index.\\r\\n     */\\r\\n    function cancelOrder(\\r\\n        uint itemId,\\r\\n        uint orderId\\r\\n    ) \\r\\n        public\\r\\n        validateIds(itemId, orderId, true)\\r\\n        returns(bool)\\r\\n    {\\r\\n        (IFactory.Item memory item, IFactory iFact) = _requireIsABuyer(itemId, orderId, _msgSender());\\r\\n        if(item.info.orders[orderId].stage == IFactory.Stage.CANCELLED) revert OrderAlreadyCancelled(orderId);\\r\\n        _checkOrderStage(item, orderId);\\r\\n        return iFact.cancelOrder(itemId, orderId);\\r\\n    }\\r\\n\\r\\n\\r\\n    /** ------> INTERNAL FUNCTIONS <-------  */\\r\\n\\r\\n    function _requireIsABuyer(\\r\\n        uint itemId, \\r\\n        uint negoId, \\r\\n        address caller\\r\\n    ) \\r\\n        internal \\r\\n        view\\r\\n        returns(IFactory.Item memory item, IFactory iFact) \\r\\n    {\\r\\n        iFact = _wrappedFactory();\\r\\n        item = iFact.getItem(itemId);\\r\\n        if(item.info.orders[negoId].customer != caller) {\\r\\n            revert CallerNotTheCustomer(caller);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev For buyer to interact with an order, the order stage must be in any of the following:\\r\\n     *      - COMMIT, or\\r\\n     *      - REJECTED, or\\r\\n     *      - CANCELLED\\r\\n     * @param orderId : Order Id.\\r\\n     * @param item : item data\\r\\n     */\\r\\n    function _checkOrderStage(IFactory.Item memory item, uint orderId) internal pure {\\r\\n        require(uint8(item.info.orders[orderId].stage) < 3, \\\"Cannot cancel order at this time\\\");\\r\\n    }\\r\\n\\r\\n    function _initialCheck(\\r\\n        IFactory.Item memory item,\\r\\n        address buyer, \\r\\n        uint24 requestedQuantity, \\r\\n        uint offerPrice\\r\\n    ) \\r\\n        internal \\r\\n        view\\r\\n        returns(uint allowance, uint24 initialQty) \\r\\n    {\\r\\n        allowance = IERC20(uSDT).allowance(buyer, address(this));\\r\\n        if(requestedQuantity == 0) revert QuantityCannotBeZero(requestedQuantity);\\r\\n        if(requestedQuantity > item.info.quantity) revert RequestedQuantityExceedAvailableQuantity(requestedQuantity, uint24(item.info.quantity));\\r\\n        initialQty = uint24(item.info.quantity);\\r\\n        require(allowance >= offerPrice * requestedQuantity, \\\"Factory: Allowance too low\\\");\\r\\n    }\\r\\n\\r\\n    function _deductFee(\\r\\n        uint amount, \\r\\n        address feeReceiver\\r\\n    ) \\r\\n        internal \\r\\n        returns(uint balance) \\r\\n    {\\r\\n        uint fee = amount.computeFee(feePercentage);\\r\\n        unchecked {\\r\\n            balance = amount - fee;\\r\\n        }\\r\\n        if(fee > 0) {\\r\\n            _transferFee(fee, feeReceiver);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Refunds Buyer their commitment. This happens when Sellers wish to remove their ADs\\r\\n     * @param orders : Order struct data. See IFactory.Order.\\r\\n     */\\r\\n    function refund(\\r\\n        IFactory.Order[] memory orders\\r\\n    ) \\r\\n        external \\r\\n        onlyRoleStatus(\\\"Buyer: Only Seller contract is allowed\\\")\\r\\n        returns(bool)\\r\\n    {\\r\\n        for(uint i = 0; i < orders.length; i++) {\\r\\n            if(orders[i].commitment > 0) {\\r\\n                require(orders[i].stage == IFactory.Stage.COMMIT || orders[i].stage == IFactory.Stage.REJECTED, \\\"Buyer: Blocked\\\");\\r\\n                approve(orders[i].customer, orders[i].commitment);\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buyer pays seller. \\r\\n     * @notice Fee is deducted.\\r\\n     * @param amount : Amount to pay.\\r\\n     * @param seller : Seller's address.\\r\\n     */\\r\\n    function paySeller(\\r\\n        uint amount, \\r\\n        address seller, \\r\\n        address feeReceiver\\r\\n    ) \\r\\n        external \\r\\n        onlyRoleStatus(\\\"Buyer: Only Factory is allowed\\\")\\r\\n        returns(bool)\\r\\n    {\\r\\n        approve(seller, _deductFee(amount, feeReceiver));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buyer confirm receipt of goods. On confirmation, the trade is finalized \\r\\n     * and payment is released to the seller.\\r\\n     * @param itemId : Item Id.\\r\\n     * @param orderId : Order Id.\\r\\n     */\\r\\n    function confirmOnReceipt(\\r\\n        uint itemId,\\r\\n        uint orderId\\r\\n    ) \\r\\n        public \\r\\n        validateIds(itemId, orderId, true)\\r\\n        returns(bool) \\r\\n    {\\r\\n        (, IFactory iFact) = _requireIsABuyer(itemId, orderId, _msgSender());\\r\\n        iFact.signConfirmation(itemId, orderId, _msgSender());\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getInterfaceId() external view returns(bytes32) {\\r\\n        return interfaceId;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x257c0a7e05935392f4031654e8cdb8160f0f910209bb1d047fc6060b549eb1b0\",\"license\":\"MIT\"},\"contracts/implementations/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { IFactory } from \\\"../interfaces/IFactory.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { Lib } from \\\"../Lib.sol\\\";\\r\\nimport { Pausable } from \\\"../abstracts/Pausable.sol\\\";\\r\\n\\r\\nabstract contract Common is Pausable {\\r\\n    using Lib for *;\\r\\n\\r\\n    // Errors\\r\\n    error UnsupportedCategory(uint8);\\r\\n    error InvalidItemId(uint);\\r\\n\\r\\n    IFactory immutable factory;\\r\\n    IERC20 public uSDT;\\r\\n\\r\\n    /**\\r\\n     * @notice In order to use 'categorySelector' with the enum Category, we must\\r\\n     * ensure 'categorySelector' is not out of bound since enums are index based\\r\\n     * just like an array. \\r\\n     * @param categorySelector : Category selector \\r\\n     */\\r\\n    modifier validateCategoryId(uint8 categorySelector) {\\r\\n        if(categorySelector >= 10) revert UnsupportedCategory(categorySelector);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function : Validate store Id\\r\\n     * @param itemId : Item id\\r\\n     * @param orderId : Order id\\r\\n     * @param includeOrderId : Boolean flag to validate order id or not.\\r\\n    */\\r\\n    modifier validateIds(\\r\\n        uint itemId, \\r\\n        uint orderId, \\r\\n        bool includeOrderId\\r\\n    ) \\r\\n    {\\r\\n        if(itemId >= _wrappedFactory().getStoreSize()) revert InvalidItemId(itemId);\\r\\n        if(includeOrderId) {\\r\\n            orderId.assertLThan(_wrappedFactory().getItem(itemId).info.orders.length, \\\"Invalid orderId\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        IFactory _factory,\\r\\n        IERC20 _uSDT, \\r\\n        address _roleManager\\r\\n    ) \\r\\n        Pausable(_roleManager)\\r\\n    {\\r\\n        address(_factory).notEqualInAddress(address(0), \\\"_factory is undefined\\\");\\r\\n        factory = _factory;\\r\\n        uSDT = _uSDT;\\r\\n    }\\r\\n\\r\\n    function _wrappedFactory() internal view returns(IFactory iFactory) {\\r\\n        iFactory = IFactory(factory);\\r\\n    } \\r\\n\\r\\n    function approve(address to, uint amt) internal {\\r\\n        IERC20(uSDT).approve(to, amt);\\r\\n    } \\r\\n\\r\\n    /**\\r\\n     * @dev Transfer fee to fee receiver\\r\\n     * @param amount : Amount to send.\\r\\n     * @param feeReceiver : Recipient.\\r\\n     */\\r\\n    function _transferFee(uint amount, address feeReceiver) internal {\\r\\n        IERC20(uSDT).transfer(feeReceiver, amount);\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x92d9b08e1731ffffbfedb0549c5a5d3685e043fec360c1e065a4c9f747c889a3\",\"license\":\"MIT\"},\"contracts/implementations/RoleBased.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { IRoleBased } from \\\"../interfaces/IRoleBased.sol\\\";\\r\\n/**\\r\\n * @title MsgSender \\r\\n * @author (Bobeu)\\r\\n * @notice Non-deployable contract simply returning the calling account.\\r\\n */\\r\\nabstract contract MsgSender {\\r\\n    function _msgSender() internal view returns(address sender) {\\r\\n        sender = msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title RoleBased \\r\\n * @author (Bobeu)\\r\\n * @notice Standalone contract for managing roleship in kimiko protocol.\\r\\n */\\r\\ncontract RoleBased is IRoleBased, MsgSender{\\r\\n    /**\\r\\n     * @notice Number of roles.\\r\\n     */\\r\\n    uint public rolesCount;\\r\\n\\r\\n    /**\\r\\n     * @notice Addresses with roleship permission.\\r\\n     */\\r\\n    \\r\\n    mapping (address => bool) private _isRoleBased;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of rolesCount to addresses.\\r\\n     * A valid id will return a mapped role.\\r\\n     */\\r\\n    mapping (uint => address) public roles;\\r\\n\\r\\n    /**\\r\\n     * @dev Only role is allowed.\\r\\n     */\\r\\n    modifier onlyRoleStatus {\\r\\n        require(_isRoleBased[_msgSender()], \\\"Oop! Caller is not recognized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _setRole(_msgSender(), true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns role variable.\\r\\n     */\\r\\n    function _getRole(uint roleId) \\r\\n        internal \\r\\n        view \\r\\n        returns(address _role) \\r\\n    {\\r\\n        _role = roles[roleId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add or remove target address as role.\\r\\n     * @param target: Target address.\\r\\n     * @notice 'target' parameter must not be empty.\\r\\n     */\\r\\n    function _setRole(\\r\\n        address target,\\r\\n        bool add\\r\\n    ) \\r\\n        private \\r\\n    {\\r\\n        require(target != address(0), \\\"Simplifi RoleBased: 'target' parameter is empty\\\");\\r\\n        add? (_isRoleBased[target] = true, rolesCount ++) : (_isRoleBased[target] = false, rolesCount --);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new role address\\r\\n     * @param newRoles: New roles\\r\\n     * @notice Only address with role permission can add another role.\\r\\n     */\\r\\n    function setPermission(\\r\\n        address[] memory newRoles\\r\\n    ) \\r\\n        external\\r\\n        onlyRoleStatus\\r\\n        returns(bool) \\r\\n    {\\r\\n        bool rt = true;\\r\\n        for(uint r = 0; r < newRoles.length; r++) {\\r\\n            _setRole(newRoles[r], rt);\\r\\n        }\\r\\n        return rt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an address as role.\\r\\n     * @param target: Target address\\r\\n     * @notice Only address with role permission can remove another role.\\r\\n     */\\r\\n    function removeRole(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        onlyRoleStatus\\r\\n        returns(bool) \\r\\n    {\\r\\n        _setRole(target, false);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev An role can renounce their roleship. This however will not leave the\\r\\n     * contract empty without an role. There must be at least one role left.\\r\\n     * @notice Only address with role permission can renounce roleship.\\r\\n     */\\r\\n    function renounceRole() \\r\\n        external\\r\\n        onlyRoleStatus\\r\\n        returns(bool) \\r\\n    {\\r\\n        require(rolesCount > 1, \\\"At least 2 roles is required for one to leave\\\"); \\r\\n        _setRole(_msgSender(), false);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns role variable.\\r\\n     * Can be called externally by contracts.\\r\\n     * @param roleId : Owner Id. \\r\\n     */\\r\\n    function getRole(\\r\\n        uint roleId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address) \\r\\n    {\\r\\n        return _getRole(roleId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if target is an role.\\r\\n     * @param target : Target address.\\r\\n     */\\r\\n    function hasRole(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool) \\r\\n    {\\r\\n        return _isRoleBased[target];\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4b454fef8fd2ede49a613a476ff57d704bffef8a2480c28c499e6aaaae11a314\",\"license\":\"MIT\"},\"contracts/interfaces/IBuyer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { IFactory } from \\\"./IFactory.sol\\\";\\r\\nimport { ICommon } from \\\"./ICommon.sol\\\";\\r\\n\\r\\ninterface IBuyer is ICommon {\\r\\n    function refund(IFactory.Order[] memory) external returns(bool);\\r\\n    function paySeller(uint amount, address seller, address feeReceiver) external returns(bool);\\r\\n}\",\"keccak256\":\"0xeb3f2c06e53b6e4d7f394c4faf4feed0ee8cfa7728ceb464505a4ae4d9c83344\",\"license\":\"MIT\"},\"contracts/interfaces/ICommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface ICommon {\\r\\n    function getInterfaceId() external view returns(bytes32);\\r\\n}\",\"keccak256\":\"0x78a28ea0a82ca26fa65bd009a6aa1cc71bc6ba507d63b149fe51b536e4998f1f\",\"license\":\"MIT\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IFactory {\\r\\n    enum Category { FASHION, ELECTRONICS, PHONESNTABLETS, FURNITURES, VEHICLES, ANIMALSNPETS, EQUIPMENTSNTOOLS, REPAIRNCONSTRUCTION, SOFTWARES, BABIESNKIDS }\\r\\n    enum Stage { COMMIT, ACCEPTED, REJECTED, CANCELLED, INTRANSIT, DELIVERED }\\r\\n\\r\\n    error UnsupportedCategory(uint8);\\r\\n    error InvalidItemId();\\r\\n    error InvalidOrderId(uint negoId);\\r\\n    error OnlyBuyerCanConfirmDelivery();\\r\\n    error NotTheRealNegotiator(address);\\r\\n    error RequestedQuantityExceedAvailableQuantity(uint requested, uint expected);\\r\\n\\r\\n    struct Item {\\r\\n        address seller;\\r\\n        ItemInfo info;\\r\\n        ItemMetadata meta;\\r\\n    }\\r\\n\\r\\n    struct ItemInfo {\\r\\n        uint quantity;\\r\\n        uint id;\\r\\n        uint priceLimit;\\r\\n        bytes description;\\r\\n        bytes location;\\r\\n        Order[] orders;\\r\\n    }\\r\\n\\r\\n    struct ItemMetadata {\\r\\n        Category category;\\r\\n        bytes uri;\\r\\n    }\\r\\n\\r\\n    struct Order {\\r\\n        uint24 quantity;\\r\\n        uint32 date;\\r\\n        uint offerPrice;\\r\\n        uint commitment;\\r\\n        address customer;\\r\\n        Stage stage;\\r\\n        Info info;\\r\\n        address firstSigner;\\r\\n    }\\r\\n\\r\\n    struct Info {\\r\\n        bytes destination;\\r\\n        bytes contacts;\\r\\n    }\\r\\n\\r\\n    // -------> PARAMS <-------\\r\\n\\r\\n    struct AddItemParam {\\r\\n        uint8 quantity;\\r\\n        uint8 categorySelector;\\r\\n        uint priceLimit;\\r\\n        string imageUrI;\\r\\n        string description;\\r\\n        string location;\\r\\n        address seller;\\r\\n    }\\r\\n\\r\\n    function listNewItem(AddItemParam memory) external returns(Item memory) ;\\r\\n    function placeOrder(Order memory order, uint itemId, uint24 newQuantity) external returns(bool);\\r\\n    function getItem(uint itemId) external view returns(Item memory);\\r\\n    function editPriceLimit(uint itemId, uint newPriceLimit) external returns (bool);\\r\\n    function editOrder(\\r\\n        uint24 newQuantity,\\r\\n        uint itemId,\\r\\n        uint orderId,\\r\\n        uint newOfferPrice,\\r\\n        uint newCommitment\\r\\n    )\\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function editQuantity(uint24 newQuantity, uint itemId) external returns (bool);\\r\\n    function getStoreSize() external view returns(uint);\\r\\n    function removeItem(uint itemId) external returns(bool);\\r\\n    function cancelOrder(uint itemId, uint orderId) external returns(bool);\\r\\n    function signConfirmation(uint itemId, uint orderId, address party) external returns(bool);\\r\\n    function moveOrder(\\r\\n        uint itemId,\\r\\n        uint orderId,\\r\\n        Stage stage\\r\\n    ) external returns(bool);\\r\\n\\r\\n    event ItemRemoved(uint itemId, IERC20 asset);\\r\\n}\",\"keccak256\":\"0x2c7b1ca26386105e61ab27826250670189676f707f4b761bf5e4249b97f35418\",\"license\":\"MIT\"},\"contracts/interfaces/IRoleBased.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/**\\r\\n * @title IRoleBased \\r\\n * Interface of the RoleBased contract\\r\\n * @author Bobeu\\r\\n */\\r\\ninterface IRoleBased {\\r\\n    function setPermission(\\r\\n        address[] memory newRoles\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function removeRole(\\r\\n        address target\\r\\n    ) \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function renounceRole() \\r\\n        external\\r\\n        returns(bool);\\r\\n\\r\\n    function getRole(\\r\\n        uint ownerId\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns(address);\\r\\n\\r\\n    function hasRole(\\r\\n        address target\\r\\n    )\\r\\n        external\\r\\n        view \\r\\n        returns(bool);\\r\\n}\",\"keccak256\":\"0x62204a90dd90e628250e4e220931adac9bba8dbc1b188daa9271f02c55d1a970\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620029a8380380620029a88339810160408190526200003491620001dc565b82828280806200004d8164010000000062000140810204565b50506000805460a060020a60ff021916815560408051808201909152601581527f5f666163746f727920697320756e646566696e656400000000000000000000006020820152620000b291600160a060020a0386169164010000000062000162810204565b50600160a060020a039182166080526001805491909216600160a860020a031990911617743200000000000000000000000000000000000000001790556040517f4255594552000000000000000000000000000000000000000000000000000000602082015260250160408051601f19818403018152919052805160209091012060a0525062000280915050565b60008054600160a060020a031916600160a060020a0392909216919091179055565b81600160a060020a031683600160a060020a031614158190620001bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001b4919062000230565b60405180910390fd5b50505050565b600160a060020a0381168114620001d957600080fd5b50565b600080600060608486031215620001f257600080fd5b8351620001ff81620001c3565b60208501519093506200021281620001c3565b60408501519092506200022581620001c3565b809150509250925092565b600060208083528351808285015260005b818110156200025f5785810183015185820160400152820162000241565b506000604082860101526040601f19601f8301168501019250505092915050565b60805160a0516126bc620002ec600039600061016d0152600081816102620152818161031a01528181610406015281816104ab01528181610d8001528181610e3301528181610f860152818161103901528181611149015281816111fc015261175201526126bc6000f3fe608060405234801561001057600080fd5b50600436106100f85760003560e060020a90048063a001ecdd1161009b578063bdf8385a1161006a578063bdf8385a14610210578063c376c8ed14610223578063cbea806c14610236578063f1d588c51461024957600080fd5b8063a001ecdd146101b1578063a5766aa6146101d7578063a941680e146101ea578063b6ed0632146101fd57600080fd5b80635c975abb116100d75780635c975abb1461014a5780636b9241fc1461016857806382a736f3146101965780638456cb59146101a957600080fd5b8062435da5146100fd5780633e64389f1461012d5780633f4ba83a14610142575b600080fd5b60005461011090600160a060020a031681565b604051600160a060020a0390911681526020015b60405180910390f35b61014061013b366004611c46565b61025c565b005b610140610686565b60005460a060020a900460ff165b6040519015158152602001610124565b6040517f00000000000000000000000000000000000000000000000000000000000000008152602001610124565b6101586101a4366004611db8565b6107cc565b6101406109f9565b6001546101c59060a060020a900460ff1681565b60405160ff9091168152602001610124565b6101586101e5366004611f02565b610b2b565b6101586101f8366004611f25565b610c5c565b61015861020b366004611f67565b610d78565b61015861021e366004611f89565b610f7e565b60015461011090600160a060020a031681565b610158610244366004611f67565b611141565b610158610257366004611fc4565b6112c6565b836000807f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa1580156102c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e59190611fe1565b831061030f5760405160e260020a6309afba81028152600481018490526024015b60405180910390fd5b80156103fe576103fe7f00000000000000000000000000000000000000000000000000000000000000005b600160a060020a0316633129e773856040518263ffffffff1660e060020a02815260040161036a91815260200190565b600060405180830381865afa158015610387573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103af919081019061227d565b6020015160a00151516040518060400160405280600f81526020017f496e76616c6964206f7264657249640000000000000000000000000000000000815250846113f59092919063ffffffff16565b6000806104a27f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316633129e7738b6040518263ffffffff1660e060020a02815260040161045591815260200190565b600060405180830381865afa158015610472573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261049a919081019061227d565b338c8b61141f565b915091506104cd7f000000000000000000000000000000000000000000000000000000000000000090565b600160a060020a031663c5e866386040518061010001604052808d62ffffff1681526020014263ffffffff1681526020018b81526020018581526020016105113390565b600160a060020a0316815260200160008152602001604051806040016040528061053a8d6115c3565b81526020016105488c6115c3565b90528152600060209091015260405160e060020a63ffffffff841602815261057991908d908f870390600401612454565b6020604051808303816000875af1158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc919061250d565b50600154600160a060020a03166323b872dd3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152306024820152604481018590526064016020604051808303816000875af1158015610620573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610644919061250d565b61067a576040517f64d4deb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050565b60405180606001604052806024815260200161263d60249139600054600160a060020a0316806106cb5760405160e560020a62461bcd0281526004016103069061252f565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa15801561071d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610741919061250d565b82906107635760405160e560020a62461bcd0281526004016103069190612566565b5061076c6115ec565b6000805474ff0000000000000000000000000000000000000000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a15050565b600060405180606001604052806026815260200161261760269139600054600160a060020a0316806108135760405160e560020a62461bcd0281526004016103069061252f565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa158015610865573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610889919061250d565b82906108ab5760405160e560020a62461bcd0281526004016103069190612566565b5060005b84518110156109ee5760008582815181106108cc576108cc612579565b60200260200101516060015111156109dc5760008582815181106108f2576108f2612579565b602002602001015160a00151600581111561090f5761090f6123b3565b14806109495750600285828151811061092a5761092a612579565b602002602001015160a001516005811115610947576109476123b3565b145b6109985760405160e560020a62461bcd02815260206004820152600e60248201527f42757965723a20426c6f636b65640000000000000000000000000000000000006044820152606401610306565b6109dc8582815181106109ad576109ad612579565b6020026020010151608001518683815181106109cb576109cb612579565b602002602001015160600151611631565b806109e6816125ab565b9150506108af565b506001949350505050565b6040518060600160405280602281526020016125f560229139600054600160a060020a031680610a3e5760405160e560020a62461bcd0281526004016103069061252f565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa158015610a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab4919061250d565b8290610ad65760405160e560020a62461bcd0281526004016103069190612566565b50610adf6116c7565b6000805474ff0000000000000000000000000000000000000000191660a060020a1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586107ad3390565b60408051808201909152601481527f42757965723a204e6f7420746865206f776e6572000000000000000000000000602082015260008054909190600160a060020a031680610b8f5760405160e560020a62461bcd0281526004016103069061252f565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c05919061250d565b8290610c275760405160e560020a62461bcd0281526004016103069190612566565b506001805460ff861660a060020a0274ff00000000000000000000000000000000000000001990911617815592505050919050565b60408051808201909152601e81527f42757965723a204f6e6c7920466163746f727920697320616c6c6f7765640000602082015260008054909190600160a060020a031680610cc05760405160e560020a62461bcd0281526004016103069061252f565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa158015610d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d36919061250d565b8290610d585760405160e560020a62461bcd0281526004016103069190612566565b50610d6c85610d67888761170b565b611631565b50600195945050505050565b6000828260017f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610ddf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e039190611fe1565b8310610e285760405160e260020a6309afba8102815260048101849052602401610306565b8015610e5757610e577f000000000000000000000000000000000000000000000000000000000000000061033a565b600080610e65888833611746565b90925090506003826020015160a001518881518110610e8657610e86612579565b602002602001015160a001516005811115610ea357610ea36123b3565b03610edd576040517ff23ffb5800000000000000000000000000000000000000000000000000000000815260048101889052602401610306565b610ee7828861187f565b6040517fb6ed06320000000000000000000000000000000000000000000000000000000081526004810189905260248101889052600160a060020a0382169063b6ed0632906044016020604051808303816000875af1158015610f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f72919061250d565b98975050505050505050565b6000838260017f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610fe5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110099190611fe1565b831061102e5760405160e260020a6309afba8102815260048101849052602401610306565b801561105d5761105d7f000000000000000000000000000000000000000000000000000000000000000061033a565b60008061106b898833611746565b91509150611079828861187f565b600061108783338d8c61141f565b506040517ffba2739500000000000000000000000000000000000000000000000000000000815262ffffff8d166004820152602481018c9052604481018a9052606481018b905260848101829052909150600160a060020a0383169063fba273959060a4016020604051808303816000875af115801561110b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112f919061250d565b5060019b9a5050505050505050505050565b6000828260017f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa1580156111a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cc9190611fe1565b83106111f15760405160e260020a6309afba8102815260048101849052602401610306565b8015611220576112207f000000000000000000000000000000000000000000000000000000000000000061033a565b600061122d878733611746565b915050600160a060020a038116635650c2e588883360405160e060020a63ffffffff861602815260048101939093526024830191909152600160a060020a031660448201526064016020604051808303816000875af1158015611294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b8919061250d565b506001979650505050505050565b60408051808201909152601d81527f4f6e6c79526f6c655374617475733a204e6f74207065726d6974746564000000602082015260008054909190600160a060020a03168061132a5760405160e560020a62461bcd0281526004016103069061252f565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa15801561137c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a0919061250d565b82906113c25760405160e560020a62461bcd0281526004016103069190612566565b506000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386161790555060019392505050565b808284106114195760405160e560020a62461bcd0281526004016103069190612566565b50505050565b6001546040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152306024830152600092839291169063dd62ed3e90604401602060405180830381865afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190611fe1565b91508362ffffff166000036114f8576040517ffb6134c700000000000000000000000000000000000000000000000000000000815262ffffff85166004820152602401610306565b60208601515162ffffff85161115611552576020860151516040517f62b5a72500000000000000000000000000000000000000000000000000000000815262ffffff80871660048301529091166024820152604401610306565b5060208501515161156862ffffff8516846125c4565b8210156115ba5760405160e560020a62461bcd02815260206004820152601a60248201527f466163746f72793a20416c6c6f77616e636520746f6f206c6f770000000000006044820152606401610306565b94509492505050565b6060816040516020016115d69190612566565b6040516020818303038152906040529050919050565b60005460a060020a900460ff1661162f576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6001546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152602482018490529091169063095ea7b3906044015b6020604051808303816000875af115801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c2919061250d565b505050565b60005460a060020a900460ff161561162f576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154600090819061172890859060a060020a900460ff1661190f565b80850392509050801561173f5761173f8184611922565b5092915050565b61174e611a4e565b60007f00000000000000000000000000000000000000000000000000000000000000006040517f3129e77300000000000000000000000000000000000000000000000000000000815260048101879052909150600160a060020a03821690633129e77390602401600060405180830381865afa1580156117d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117fa919081019061227d565b915082600160a060020a0316826020015160a00151858151811061182057611820612579565b602002602001015160800151600160a060020a031614611877576040517f8ea375ba000000000000000000000000000000000000000000000000000000008152600160a060020a0384166004820152602401610306565b935093915050565b6003826020015160a00151828151811061189b5761189b612579565b602002602001015160a0015160058111156118b8576118b86123b3565b60ff161061190b5760405160e560020a62461bcd02815260206004820181905260248201527f43616e6e6f742063616e63656c206f7264657220617420746869732074696d656044820152606401610306565b5050565b600061191b8383611974565b9392505050565b6001546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038381166004830152602482018590529091169063a9059cbb9060440161167f565b600061271061ffff83161580611988575083155b15611997576000915050611a24565b6119df8361ffff1661ffff80166040518060400160405280601181526020017f496e746572657374206f766572666c6f770000000000000000000000000000008152506113f5565b611a06848261ffff1660405180606001604052806026815260200161266160269139611a2a565b8061ffff168361ffff16850281611a1f57611a1f6125db565b049150505b92915050565b808284116114195760405160e560020a62461bcd0281526004016103069190612566565b60405180606001604052806000600160a060020a03168152602001611aa26040518060c001604052806000815260200160008152602001600081526020016060815260200160608152602001606081525090565b8152602001611ac260408051808201909152600081526060602082015290565b905290565b62ffffff81168114611ad857600080fd5b50565b8035611ae681611ac7565b919050565b60e060020a634e487b7102600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611b2757611b27611aeb565b60405290565b604051610100810167ffffffffffffffff81118282101715611b2757611b27611aeb565b6040516060810167ffffffffffffffff81118282101715611b2757611b27611aeb565b60405160c0810167ffffffffffffffff81118282101715611b2757611b27611aeb565b604051601f8201601f1916810167ffffffffffffffff81118282101715611bc057611bc0611aeb565b604052919050565b600067ffffffffffffffff821115611be257611be2611aeb565b50601f01601f191660200190565b600082601f830112611c0157600080fd5b8135611c14611c0f82611bc8565b611b97565b818152846020838601011115611c2957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611c5e57600080fd5b8535611c6981611ac7565b94506020860135935060408601359250606086013567ffffffffffffffff80821115611c9457600080fd5b611ca089838a01611bf0565b93506080880135915080821115611cb657600080fd5b50611cc388828901611bf0565b9150509295509295909350565b600067ffffffffffffffff821115611cea57611cea611aeb565b5060209081020190565b63ffffffff81168114611ad857600080fd5b8035611ae681611cf4565b600160a060020a0381168114611ad857600080fd5b8035611ae681611d11565b60068110611ad857600080fd5b8035611ae681611d31565b600060408284031215611d5b57600080fd5b611d63611b04565b9050813567ffffffffffffffff80821115611d7d57600080fd5b611d8985838601611bf0565b83526020840135915080821115611d9f57600080fd5b50611dac84828501611bf0565b60208301525092915050565b60006020808385031215611dcb57600080fd5b823567ffffffffffffffff80821115611de357600080fd5b818501915085601f830112611df757600080fd5b8135611e05611c0f82611cd0565b81815290840283018401908481019088831115611e2157600080fd5b8585015b83811015611ef557803585811115611e3c57600080fd5b8601610100818c03601f1901811315611e5457600080fd5b611e5c611b2d565b611e678a8401611adb565b8152611e7560408401611d06565b8a8201526060830135604082015260808301356060820152611e9960a08401611d26565b6080820152611eaa60c08401611d3e565b60a082015260e08084013589811115611ec35760008081fd5b611ed18f8d83880101611d49565b60c084015250611ee2838501611d26565b9082015285525050918601918601611e25565b5098975050505050505050565b600060208284031215611f1457600080fd5b813560ff8116811461191b57600080fd5b600080600060608486031215611f3a57600080fd5b833592506020840135611f4c81611d11565b91506040840135611f5c81611d11565b809150509250925092565b60008060408385031215611f7a57600080fd5b50508035926020909101359150565b60008060008060808587031215611f9f57600080fd5b8435611faa81611ac7565b966020860135965060408601359560600135945092505050565b600060208284031215611fd657600080fd5b813561191b81611d11565b600060208284031215611ff357600080fd5b5051919050565b8051611ae681611d11565b60005b83811015612020578181015183820152602001612008565b50506000910152565b600082601f83011261203a57600080fd5b8151612048611c0f82611bc8565b81815284602083860101111561205d57600080fd5b61206e826020830160208701612005565b949350505050565b8051611ae681611ac7565b8051611ae681611cf4565b8051611ae681611d31565b6000604082840312156120a957600080fd5b6120b1611b04565b9050815167ffffffffffffffff808211156120cb57600080fd5b6120d785838601612029565b835260208401519150808211156120ed57600080fd5b50611dac84828501612029565b600082601f83011261210b57600080fd5b8151602061211b611c0f83611cd0565b8281529181028401810191818101908684111561213757600080fd5b8286015b8481101561221f57805167ffffffffffffffff8082111561215c5760008081fd5b90880190610100828b03601f19018113156121775760008081fd5b61217f611b2d565b61218a888501612076565b81526040612199818601612081565b89830152606080860151828401526080915081860151818401525060a06121c1818701611ffa565b8284015260c091506121d482870161208c565b9083015260e085810151858111156121ec5760008081fd5b6121fa8f8c838a0101612097565b838501525061220a848701611ffa565b9083015250865250505091830191830161213b565b509695505050505050565b60006040828403121561223c57600080fd5b612244611b04565b90508151600a811061225557600080fd5b8152602082015167ffffffffffffffff81111561227157600080fd5b611dac84828501612029565b60006020828403121561228f57600080fd5b815167ffffffffffffffff808211156122a757600080fd5b90830190606082860312156122bb57600080fd5b6122c3611b51565b82516122ce81611d11565b81526020830151828111156122e257600080fd5b830160c081880312156122f457600080fd5b6122fc611b74565b81518152602082015160208201526040820151604082015260608201518481111561232657600080fd5b61233289828501612029565b60608301525060808201518481111561234a57600080fd5b61235689828501612029565b60808301525060a08201518481111561236e57600080fd5b61237a898285016120fa565b60a08301525060208301525060408301518281111561239857600080fd5b6123a48782860161222a565b60408301525095945050505050565b60e060020a634e487b7102600052602160045260246000fd5b600681106123ed5760e060020a634e487b7102600052602160045260246000fd5b9052565b60008151808452612409816020860160208601612005565b601f01601f19169290920160200192915050565b600081516040845261243260408501826123f1565b90506020830151848203602086015261244b82826123f1565b95945050505050565b6060815262ffffff845116606082015263ffffffff6020850151166080820152604084015160a0820152606084015160c0820152600060808501516124a460e0840182600160a060020a03169052565b5060a08501516101006124b9818501836123cc565b60c0870151915080610120850152506124d661016084018261241d565b905060e08601516124f3610140850182600160a060020a03169052565b506020830185905262ffffff84166040840152905061206e565b60006020828403121561251f57600080fd5b8151801515811461191b57600080fd5b6020808252601f908201527f4f6e6c79526f6c655374617475733a204d616e61676572206e6f742073657400604082015260600190565b60208152600061191b60208301846123f1565b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052601160045260246000fd5b6000600182016125bd576125bd612592565b5060010190565b8082028115828204841417611a2457611a24612592565b60e060020a634e487b7102600052601260045260246000fdfe5061757361626c653a204f6e6c79526f6c655374617475732063616e20706175736542757965723a204f6e6c792053656c6c657220636f6e747261637420697320616c6c6f7765645061757361626c653a204f6e6c79526f6c655374617475732063616e20756e70617573655072696e636970616c2073686f756c642062652067726561746572207468616e203130303030a264697066735822122094d5bc892b723a33cddff6c8f90f89e940929a830b9e1691ffec2235a4954c6f64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f85760003560e060020a90048063a001ecdd1161009b578063bdf8385a1161006a578063bdf8385a14610210578063c376c8ed14610223578063cbea806c14610236578063f1d588c51461024957600080fd5b8063a001ecdd146101b1578063a5766aa6146101d7578063a941680e146101ea578063b6ed0632146101fd57600080fd5b80635c975abb116100d75780635c975abb1461014a5780636b9241fc1461016857806382a736f3146101965780638456cb59146101a957600080fd5b8062435da5146100fd5780633e64389f1461012d5780633f4ba83a14610142575b600080fd5b60005461011090600160a060020a031681565b604051600160a060020a0390911681526020015b60405180910390f35b61014061013b366004611c46565b61025c565b005b610140610686565b60005460a060020a900460ff165b6040519015158152602001610124565b6040517f00000000000000000000000000000000000000000000000000000000000000008152602001610124565b6101586101a4366004611db8565b6107cc565b6101406109f9565b6001546101c59060a060020a900460ff1681565b60405160ff9091168152602001610124565b6101586101e5366004611f02565b610b2b565b6101586101f8366004611f25565b610c5c565b61015861020b366004611f67565b610d78565b61015861021e366004611f89565b610f7e565b60015461011090600160a060020a031681565b610158610244366004611f67565b611141565b610158610257366004611fc4565b6112c6565b836000807f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa1580156102c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e59190611fe1565b831061030f5760405160e260020a6309afba81028152600481018490526024015b60405180910390fd5b80156103fe576103fe7f00000000000000000000000000000000000000000000000000000000000000005b600160a060020a0316633129e773856040518263ffffffff1660e060020a02815260040161036a91815260200190565b600060405180830381865afa158015610387573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103af919081019061227d565b6020015160a00151516040518060400160405280600f81526020017f496e76616c6964206f7264657249640000000000000000000000000000000000815250846113f59092919063ffffffff16565b6000806104a27f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316633129e7738b6040518263ffffffff1660e060020a02815260040161045591815260200190565b600060405180830381865afa158015610472573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261049a919081019061227d565b338c8b61141f565b915091506104cd7f000000000000000000000000000000000000000000000000000000000000000090565b600160a060020a031663c5e866386040518061010001604052808d62ffffff1681526020014263ffffffff1681526020018b81526020018581526020016105113390565b600160a060020a0316815260200160008152602001604051806040016040528061053a8d6115c3565b81526020016105488c6115c3565b90528152600060209091015260405160e060020a63ffffffff841602815261057991908d908f870390600401612454565b6020604051808303816000875af1158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc919061250d565b50600154600160a060020a03166323b872dd3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152306024820152604481018590526064016020604051808303816000875af1158015610620573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610644919061250d565b61067a576040517f64d4deb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050565b60405180606001604052806024815260200161263d60249139600054600160a060020a0316806106cb5760405160e560020a62461bcd0281526004016103069061252f565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa15801561071d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610741919061250d565b82906107635760405160e560020a62461bcd0281526004016103069190612566565b5061076c6115ec565b6000805474ff0000000000000000000000000000000000000000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a15050565b600060405180606001604052806026815260200161261760269139600054600160a060020a0316806108135760405160e560020a62461bcd0281526004016103069061252f565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa158015610865573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610889919061250d565b82906108ab5760405160e560020a62461bcd0281526004016103069190612566565b5060005b84518110156109ee5760008582815181106108cc576108cc612579565b60200260200101516060015111156109dc5760008582815181106108f2576108f2612579565b602002602001015160a00151600581111561090f5761090f6123b3565b14806109495750600285828151811061092a5761092a612579565b602002602001015160a001516005811115610947576109476123b3565b145b6109985760405160e560020a62461bcd02815260206004820152600e60248201527f42757965723a20426c6f636b65640000000000000000000000000000000000006044820152606401610306565b6109dc8582815181106109ad576109ad612579565b6020026020010151608001518683815181106109cb576109cb612579565b602002602001015160600151611631565b806109e6816125ab565b9150506108af565b506001949350505050565b6040518060600160405280602281526020016125f560229139600054600160a060020a031680610a3e5760405160e560020a62461bcd0281526004016103069061252f565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa158015610a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab4919061250d565b8290610ad65760405160e560020a62461bcd0281526004016103069190612566565b50610adf6116c7565b6000805474ff0000000000000000000000000000000000000000191660a060020a1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586107ad3390565b60408051808201909152601481527f42757965723a204e6f7420746865206f776e6572000000000000000000000000602082015260008054909190600160a060020a031680610b8f5760405160e560020a62461bcd0281526004016103069061252f565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c05919061250d565b8290610c275760405160e560020a62461bcd0281526004016103069190612566565b506001805460ff861660a060020a0274ff00000000000000000000000000000000000000001990911617815592505050919050565b60408051808201909152601e81527f42757965723a204f6e6c7920466163746f727920697320616c6c6f7765640000602082015260008054909190600160a060020a031680610cc05760405160e560020a62461bcd0281526004016103069061252f565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa158015610d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d36919061250d565b8290610d585760405160e560020a62461bcd0281526004016103069190612566565b50610d6c85610d67888761170b565b611631565b50600195945050505050565b6000828260017f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610ddf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e039190611fe1565b8310610e285760405160e260020a6309afba8102815260048101849052602401610306565b8015610e5757610e577f000000000000000000000000000000000000000000000000000000000000000061033a565b600080610e65888833611746565b90925090506003826020015160a001518881518110610e8657610e86612579565b602002602001015160a001516005811115610ea357610ea36123b3565b03610edd576040517ff23ffb5800000000000000000000000000000000000000000000000000000000815260048101889052602401610306565b610ee7828861187f565b6040517fb6ed06320000000000000000000000000000000000000000000000000000000081526004810189905260248101889052600160a060020a0382169063b6ed0632906044016020604051808303816000875af1158015610f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f72919061250d565b98975050505050505050565b6000838260017f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610fe5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110099190611fe1565b831061102e5760405160e260020a6309afba8102815260048101849052602401610306565b801561105d5761105d7f000000000000000000000000000000000000000000000000000000000000000061033a565b60008061106b898833611746565b91509150611079828861187f565b600061108783338d8c61141f565b506040517ffba2739500000000000000000000000000000000000000000000000000000000815262ffffff8d166004820152602481018c9052604481018a9052606481018b905260848101829052909150600160a060020a0383169063fba273959060a4016020604051808303816000875af115801561110b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112f919061250d565b5060019b9a5050505050505050505050565b6000828260017f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316634e676e236040518163ffffffff1660e060020a028152600401602060405180830381865afa1580156111a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cc9190611fe1565b83106111f15760405160e260020a6309afba8102815260048101849052602401610306565b8015611220576112207f000000000000000000000000000000000000000000000000000000000000000061033a565b600061122d878733611746565b915050600160a060020a038116635650c2e588883360405160e060020a63ffffffff861602815260048101939093526024830191909152600160a060020a031660448201526064016020604051808303816000875af1158015611294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b8919061250d565b506001979650505050505050565b60408051808201909152601d81527f4f6e6c79526f6c655374617475733a204e6f74207065726d6974746564000000602082015260008054909190600160a060020a03168061132a5760405160e560020a62461bcd0281526004016103069061252f565b600160a060020a038116637ef09bca3360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381865afa15801561137c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a0919061250d565b82906113c25760405160e560020a62461bcd0281526004016103069190612566565b506000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386161790555060019392505050565b808284106114195760405160e560020a62461bcd0281526004016103069190612566565b50505050565b6001546040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152306024830152600092839291169063dd62ed3e90604401602060405180830381865afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190611fe1565b91508362ffffff166000036114f8576040517ffb6134c700000000000000000000000000000000000000000000000000000000815262ffffff85166004820152602401610306565b60208601515162ffffff85161115611552576020860151516040517f62b5a72500000000000000000000000000000000000000000000000000000000815262ffffff80871660048301529091166024820152604401610306565b5060208501515161156862ffffff8516846125c4565b8210156115ba5760405160e560020a62461bcd02815260206004820152601a60248201527f466163746f72793a20416c6c6f77616e636520746f6f206c6f770000000000006044820152606401610306565b94509492505050565b6060816040516020016115d69190612566565b6040516020818303038152906040529050919050565b60005460a060020a900460ff1661162f576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6001546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152602482018490529091169063095ea7b3906044015b6020604051808303816000875af115801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c2919061250d565b505050565b60005460a060020a900460ff161561162f576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154600090819061172890859060a060020a900460ff1661190f565b80850392509050801561173f5761173f8184611922565b5092915050565b61174e611a4e565b60007f00000000000000000000000000000000000000000000000000000000000000006040517f3129e77300000000000000000000000000000000000000000000000000000000815260048101879052909150600160a060020a03821690633129e77390602401600060405180830381865afa1580156117d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117fa919081019061227d565b915082600160a060020a0316826020015160a00151858151811061182057611820612579565b602002602001015160800151600160a060020a031614611877576040517f8ea375ba000000000000000000000000000000000000000000000000000000008152600160a060020a0384166004820152602401610306565b935093915050565b6003826020015160a00151828151811061189b5761189b612579565b602002602001015160a0015160058111156118b8576118b86123b3565b60ff161061190b5760405160e560020a62461bcd02815260206004820181905260248201527f43616e6e6f742063616e63656c206f7264657220617420746869732074696d656044820152606401610306565b5050565b600061191b8383611974565b9392505050565b6001546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038381166004830152602482018590529091169063a9059cbb9060440161167f565b600061271061ffff83161580611988575083155b15611997576000915050611a24565b6119df8361ffff1661ffff80166040518060400160405280601181526020017f496e746572657374206f766572666c6f770000000000000000000000000000008152506113f5565b611a06848261ffff1660405180606001604052806026815260200161266160269139611a2a565b8061ffff168361ffff16850281611a1f57611a1f6125db565b049150505b92915050565b808284116114195760405160e560020a62461bcd0281526004016103069190612566565b60405180606001604052806000600160a060020a03168152602001611aa26040518060c001604052806000815260200160008152602001600081526020016060815260200160608152602001606081525090565b8152602001611ac260408051808201909152600081526060602082015290565b905290565b62ffffff81168114611ad857600080fd5b50565b8035611ae681611ac7565b919050565b60e060020a634e487b7102600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611b2757611b27611aeb565b60405290565b604051610100810167ffffffffffffffff81118282101715611b2757611b27611aeb565b6040516060810167ffffffffffffffff81118282101715611b2757611b27611aeb565b60405160c0810167ffffffffffffffff81118282101715611b2757611b27611aeb565b604051601f8201601f1916810167ffffffffffffffff81118282101715611bc057611bc0611aeb565b604052919050565b600067ffffffffffffffff821115611be257611be2611aeb565b50601f01601f191660200190565b600082601f830112611c0157600080fd5b8135611c14611c0f82611bc8565b611b97565b818152846020838601011115611c2957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611c5e57600080fd5b8535611c6981611ac7565b94506020860135935060408601359250606086013567ffffffffffffffff80821115611c9457600080fd5b611ca089838a01611bf0565b93506080880135915080821115611cb657600080fd5b50611cc388828901611bf0565b9150509295509295909350565b600067ffffffffffffffff821115611cea57611cea611aeb565b5060209081020190565b63ffffffff81168114611ad857600080fd5b8035611ae681611cf4565b600160a060020a0381168114611ad857600080fd5b8035611ae681611d11565b60068110611ad857600080fd5b8035611ae681611d31565b600060408284031215611d5b57600080fd5b611d63611b04565b9050813567ffffffffffffffff80821115611d7d57600080fd5b611d8985838601611bf0565b83526020840135915080821115611d9f57600080fd5b50611dac84828501611bf0565b60208301525092915050565b60006020808385031215611dcb57600080fd5b823567ffffffffffffffff80821115611de357600080fd5b818501915085601f830112611df757600080fd5b8135611e05611c0f82611cd0565b81815290840283018401908481019088831115611e2157600080fd5b8585015b83811015611ef557803585811115611e3c57600080fd5b8601610100818c03601f1901811315611e5457600080fd5b611e5c611b2d565b611e678a8401611adb565b8152611e7560408401611d06565b8a8201526060830135604082015260808301356060820152611e9960a08401611d26565b6080820152611eaa60c08401611d3e565b60a082015260e08084013589811115611ec35760008081fd5b611ed18f8d83880101611d49565b60c084015250611ee2838501611d26565b9082015285525050918601918601611e25565b5098975050505050505050565b600060208284031215611f1457600080fd5b813560ff8116811461191b57600080fd5b600080600060608486031215611f3a57600080fd5b833592506020840135611f4c81611d11565b91506040840135611f5c81611d11565b809150509250925092565b60008060408385031215611f7a57600080fd5b50508035926020909101359150565b60008060008060808587031215611f9f57600080fd5b8435611faa81611ac7565b966020860135965060408601359560600135945092505050565b600060208284031215611fd657600080fd5b813561191b81611d11565b600060208284031215611ff357600080fd5b5051919050565b8051611ae681611d11565b60005b83811015612020578181015183820152602001612008565b50506000910152565b600082601f83011261203a57600080fd5b8151612048611c0f82611bc8565b81815284602083860101111561205d57600080fd5b61206e826020830160208701612005565b949350505050565b8051611ae681611ac7565b8051611ae681611cf4565b8051611ae681611d31565b6000604082840312156120a957600080fd5b6120b1611b04565b9050815167ffffffffffffffff808211156120cb57600080fd5b6120d785838601612029565b835260208401519150808211156120ed57600080fd5b50611dac84828501612029565b600082601f83011261210b57600080fd5b8151602061211b611c0f83611cd0565b8281529181028401810191818101908684111561213757600080fd5b8286015b8481101561221f57805167ffffffffffffffff8082111561215c5760008081fd5b90880190610100828b03601f19018113156121775760008081fd5b61217f611b2d565b61218a888501612076565b81526040612199818601612081565b89830152606080860151828401526080915081860151818401525060a06121c1818701611ffa565b8284015260c091506121d482870161208c565b9083015260e085810151858111156121ec5760008081fd5b6121fa8f8c838a0101612097565b838501525061220a848701611ffa565b9083015250865250505091830191830161213b565b509695505050505050565b60006040828403121561223c57600080fd5b612244611b04565b90508151600a811061225557600080fd5b8152602082015167ffffffffffffffff81111561227157600080fd5b611dac84828501612029565b60006020828403121561228f57600080fd5b815167ffffffffffffffff808211156122a757600080fd5b90830190606082860312156122bb57600080fd5b6122c3611b51565b82516122ce81611d11565b81526020830151828111156122e257600080fd5b830160c081880312156122f457600080fd5b6122fc611b74565b81518152602082015160208201526040820151604082015260608201518481111561232657600080fd5b61233289828501612029565b60608301525060808201518481111561234a57600080fd5b61235689828501612029565b60808301525060a08201518481111561236e57600080fd5b61237a898285016120fa565b60a08301525060208301525060408301518281111561239857600080fd5b6123a48782860161222a565b60408301525095945050505050565b60e060020a634e487b7102600052602160045260246000fd5b600681106123ed5760e060020a634e487b7102600052602160045260246000fd5b9052565b60008151808452612409816020860160208601612005565b601f01601f19169290920160200192915050565b600081516040845261243260408501826123f1565b90506020830151848203602086015261244b82826123f1565b95945050505050565b6060815262ffffff845116606082015263ffffffff6020850151166080820152604084015160a0820152606084015160c0820152600060808501516124a460e0840182600160a060020a03169052565b5060a08501516101006124b9818501836123cc565b60c0870151915080610120850152506124d661016084018261241d565b905060e08601516124f3610140850182600160a060020a03169052565b506020830185905262ffffff84166040840152905061206e565b60006020828403121561251f57600080fd5b8151801515811461191b57600080fd5b6020808252601f908201527f4f6e6c79526f6c655374617475733a204d616e61676572206e6f742073657400604082015260600190565b60208152600061191b60208301846123f1565b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052601160045260246000fd5b6000600182016125bd576125bd612592565b5060010190565b8082028115828204841417611a2457611a24612592565b60e060020a634e487b7102600052601260045260246000fdfe5061757361626c653a204f6e6c79526f6c655374617475732063616e20706175736542757965723a204f6e6c792053656c6c657220636f6e747261637420697320616c6c6f7765645061757361626c653a204f6e6c79526f6c655374617475732063616e20756e70617573655072696e636970616c2073686f756c642062652067726561746572207468616e203130303030a264697066735822122094d5bc892b723a33cddff6c8f90f89e940929a830b9e1691ffec2235a4954c6f64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "cancelOrder(uint256,uint256)": {
        "details": "Buyer cancels order.",
        "params": {
          "itemId": ": Item index.",
          "orderId": ": Position of order in the list/Order index."
        }
      },
      "confirmOnReceipt(uint256,uint256)": {
        "details": "Buyer confirm receipt of goods. On confirmation, the trade is finalized  and payment is released to the seller.",
        "params": {
          "itemId": ": Item Id.",
          "orderId": ": Order Id."
        }
      },
      "editOrder(uint24,uint256,uint256,uint256)": {
        "details": "Edit order.",
        "params": {
          "itemId": ": Item index.",
          "newOfferPrice": ": New offer price.",
          "newQuantity": ": New quantity.",
          "orderId": ": Position of order in the list/Order index."
        }
      },
      "pause()": {
        "details": "Triggers stopped state. Requirements: Only owner role can call. - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "paySeller(uint256,address,address)": {
        "details": "Buyer pays seller. ",
        "params": {
          "amount": ": Amount to pay.",
          "seller": ": Seller's address."
        }
      },
      "refund((uint24,uint32,uint256,uint256,address,uint8,(bytes,bytes),address)[])": {
        "details": "Refunds Buyer their commitment. This happens when Sellers wish to remove their ADs",
        "params": {
          "orders": ": Order struct data. See IFactory.Order."
        }
      },
      "setRoleManager(address)": {
        "params": {
          "newManager": ": New manager address"
        }
      },
      "startOrder(uint24,uint256,uint256,string,string)": {
        "details": "Buyer makes order for a specific good item showing they're interest indeed. Note: Buyers maintain an internal wallet created automatically for them on signUp. Buyer should give approval to spend before executing this function.",
        "params": {
          "contact": ": Buyer's contract i.e phone/email. Can be concatenate.  Note: While placing order, the buyer make commitment in full amount of the weighted offerPrice and qty.",
          "destinationAddr": ": Address where item should be dispatched if order goes well.",
          "itemId": ": Item Id.",
          "offerPrice": ": The Price buyer is willing to pay per unit of listed item.",
          "requestedQuantity": ": Quantity of item user wants to negotiate for."
        }
      },
      "unpause()": {
        "details": "Returns to normal state. Requirements: - Only owner role can call. - The contract must be paused."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "paySeller(uint256,address,address)": {
        "notice": "Fee is deducted."
      },
      "setFeePercentage(uint8)": {
        "notice": "------> PUBLIC FUNCTIONS <-------  "
      },
      "setRoleManager(address)": {
        "notice": "Set RoleManager"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 304,
        "contract": "contracts/implementations/BuyerV1.sol:BuyerV1",
        "label": "roleManager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 384,
        "contract": "contracts/implementations/BuyerV1.sol:BuyerV1",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1152,
        "contract": "contracts/implementations/BuyerV1.sol:BuyerV1",
        "label": "uSDT",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 547,
        "contract": "contracts/implementations/BuyerV1.sol:BuyerV1",
        "label": "feePercentage",
        "offset": 20,
        "slot": "1",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}